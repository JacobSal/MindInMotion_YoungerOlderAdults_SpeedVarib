%   Project Title: MIM YOUNGER AND OLDER ADULTS KINEMATICS-EEG ANALYSIS
%
%   Code Designer: Jacob salminen
%## SBATCH (SLURM KICKOFF SCRIPT)
% sbatch /blue/dferris/jsalminen/GitHub/par_EEGProcessing/src/2_STUDY/mim_yaoa_speed_kin/.sh

%{
%## RESTORE MATLAB
% WARNING: restores default pathing to matlab 
restoredefaultpath;
clc;
close all;
clearvars
%}
%% SET WORKSPACE ======================================================= %%
% opengl('dsave', 'software') % might be needed to plot dipole plots?
%## TIME
tic
ADD_ALL_SUBMODS = false;
%## Determine Working Directories
if ~ispc
    try
        SCRIPT_DIR = matlab.desktop.editor.getActiveFilename;
        SCRIPT_DIR = fileparts(SCRIPT_DIR);
        SRC_DIR = fileparts(SCRIPT_DIR); % change this if in sub folder
    catch e
        fprintf('ERROR. PWD_DIR couldn''t be set...\n%s',getReport(e))
        SCRIPT_DIR = getenv('SCRIPT_DIR');
        SRC_DIR = getenv('SRC_DIR');
    end
else
    try
        SCRIPT_DIR = matlab.desktop.editor.getActiveFilename;
        SCRIPT_DIR = fileparts(SCRIPT_DIR);
    catch e
        fprintf('ERROR. PWD_DIR couldn''t be set...\n%s',getReport(e))
        SCRIPT_DIR = dir(['.' filesep]);
        SCRIPT_DIR = SCRIPT_DIR(1).folder;
    end
    SRC_DIR = fileparts(SCRIPT_DIR); % change this if in sub folder
end
%## Add Study, Src, & Script Paths
addpath(SCRIPT_DIR)
addpath(SRC_DIR);
cd(SRC_DIR);
fprintf(1,'Current folder: %s\n',SRC_DIR);
%## Set PWD_DIR, EEGLAB path, _functions path, and others...
set_workspace
%% (DATASET INFORMATION) =============================================== %%
% [SUBJ_PICS,GROUP_NAMES,SUBJ_ITERS,~,~,~,~] = mim_dataset_information('yaoa_spca');
[SUBJ_PICS,GROUP_NAMES,SUBJ_ITERS,~,~,~,~] = mim_dataset_information('yaoa_spca_speed');
%% (PATHS) ============================================================= %%
%- datset name
DATA_SET = 'MIM_dataset';
%- study name
% STUDY_DNAME = '10172024_MIM_YAOAN89_antsnorm_dipfix_iccREMG0p4_powpow0p3_skull0p01_15mmrej_speed';
% STUDY_DNAME =  '01192025_mim_yaoa_nopowpow_crit_speed';
STUDY_DNAME = '02202025_mim_yaoa_powpow0p3_crit_speed';
STUDY_FNAME = 'kin_eeg_epoch_study';
ANALYSIS_DNAME = 'kin_eeg_step_to_step';
studies_fpath = [PATHS.data_dir filesep DATA_SET filesep '_studies'];

%## CLUSTER LOADING
CLUSTER_K = 11;
CLUSTER_STUDY_NAME = 'temp_study_rejics5';
% cluster_fpath = [studies_fpath filesep sprintf('%s',STUDY_DNAME) filesep '__iclabel_cluster_kmeansalt_rb10'];
% cluster_fpath = [studies_fpath filesep sprintf('%s',STUDY_DNAME) filesep '__iclabel_cluster_kmeansalt_rb3'];
cluster_fpath = [studies_fpath filesep sprintf('%s',STUDY_DNAME) filesep '__iclabel_cluster_allcond_rb3'];
cluster_study_fpath = [cluster_fpath filesep 'icrej_5'];
cluster_k_dir = [cluster_study_fpath filesep sprintf('%i',CLUSTER_K)];
%## R-STATS LOADING
r_stats_dir = [PATHS.src_dir filesep 'r_scripts' filesep 'sbs_lme_mods'];
%-
save_dir = [cluster_k_dir filesep ANALYSIS_DNAME];
if ~exist(save_dir,'dir')
    mkdir(save_dir);
end
%% ===================================================================== %%
% if ~ispc
%     [STUDY,ALLEEG] = pop_loadstudy('filename',[STUDY_FNAME '_UNIX.study'],'filepath',save_dir);
% else
%     [STUDY,ALLEEG] = pop_loadstudy('filename',[STUDY_FNAME '.study'],'filepath',save_dir);
% end
%## LOAD CLUSTER STUDY
if ~ispc
    tmp = load('-mat',[cluster_study_fpath filesep sprintf('%s_UNIX.study',CLUSTER_STUDY_NAME)]);
    CL_STUDY = tmp.STUDY;
else
    tmp = load('-mat',[cluster_study_fpath filesep sprintf('%s.study',CLUSTER_STUDY_NAME)]);
    CL_STUDY = tmp.STUDY;
end

%## LOAD STUDY
if ~ispc
    tmp = load('-mat',[studies_fpath filesep sprintf('%s',STUDY_DNAME) filesep sprintf('%s_UNIX.study',STUDY_FNAME)]);
    STUDY = tmp.STUDY;
else
    tmp = load('-mat',[studies_fpath filesep sprintf('%s',STUDY_DNAME) filesep sprintf('%s.study',STUDY_FNAME)]);
    STUDY = tmp.STUDY;
end
%-
cl_struct = par_load(cluster_k_dir,sprintf('cl_inf_%i.mat',CLUSTER_K));
STUDY.cluster = cl_struct;
[comps_out,main_cl_inds,outlier_cl_inds] = eeglab_get_cluster_comps(STUDY);
CLUSTER_PICS = main_cl_inds;


%%
fpaths = {STUDY.datasetinfo.filepath};
% fextr = 'perstridefb_mi_nfslidingb36';
fextr = 'perstridefb_apfix_std_mi_nfslidingb36';
dat = par_load(fpaths{1},sprintf('psd_output_%s.mat',fextr));
%--
fooof_freqs = dat.freqs;
% basel_chars = {'perstridefb_mi_nfslidingb36'};
% basel_chars = {'perstridefb_mi_nfslidingb100'};
basel_chars = {'perstridefb_apfix_std_mi_nfslidingb36'};

dat_out_structs = cell(1,length(basel_chars));
%## LOAD
for b_i = 1:length(basel_chars)
    dat_out_structs{b_i} = par_load([cluster_k_dir filesep 'kin_eeg_step_to_step' filesep sprintf('raw_psd_dat_%s.mat',basel_chars{b_i})]);
end
%% (LOAD STATISTICS & DATA EXCEL SHEET FROM R) ========================= %%
%## FNAMES
%-- r stats
% fextr = 'allcond_perstridefb_mi_nfslidingb36_rerun';
fextr = 'allcond_perstridefb_apfix_std_mi_nfslidingb36_rerun';
% fextr = 'allcond_perstridefb_apfix_std_mi_nfslidingb36';

%## IMPORT MEANSD DATA
% KIN_TABLE = readtable([r_stats_dir filesep sprintf('03122025_lme_eeg_kin_meansd_%s_tbl.xlsx',fextr)], ...
%     "FileType","spreadsheet","UseExcel",true);
% KIN_TABLE = readtable([r_stats_dir filesep sprintf('03312025_lme_eeg_kin_meansd_%s_tbl.xlsx',fextr)], ...
%     "FileType","spreadsheet","UseExcel",true);
% %-- r-stats
% RSTATS_IMPORT = readtable([r_stats_dir filesep sprintf('03312025_lme_eeg_kin_meansd_%s_stats.xlsx',fextr)], ...
%     "FileType","spreadsheet","UseExcel",true);
KIN_TABLE = readtable([r_stats_dir filesep '_excel_data' filesep sprintf('manutbl_lme_eeg_kin_meansd_%s_tbl.xlsx',fextr)], ...
    "FileType","spreadsheet","UseExcel",true);
%-- r-stats
RSTATS_IMPORT = readtable([r_stats_dir filesep '_excel_data' filesep sprintf('manutbl_lme_eeg_kin_meansd_%s_stats.xlsx',fextr)], ...
    "FileType","spreadsheet","UseExcel",true);

%##
% fextr = 'allcond_perstridefb_mi_nfslidingb36_rerun';
% fext = 'allcond_perstridefb_mi_nfslidingb36';
% fextr = 'allcond_perstridefb_apfix_std_mi_nfslidingb100_rerun';
% fext = 'allcond_perstridefb_apfix_std_mi_nfslidingb100';
%-- r-stats
% KIN_TABLE = par_load(save_dir,sprintf('sbs_eeg_psd_kin_%s.mat',fext));
% RSTATS_IMPORT = readtable([r_stats_dir filesep sprintf('05132025_lme_eeg_kin_%s_stats.xlsx',fextr)], ...
%     "FileType","spreadsheet","UseExcel",true);
%% MEASURES TO ANALYZE ================================================= %%
%## STATS
try
    STUDY.etc = rmfield(STUDY.etc,'statistics');
end
STUDY = pop_statparams(STUDY,...
    'groupstats','off',...
    'condstats','on',...
    'method','perm',...
    'singletrials','off',...
    'mode','fieldtrip',...
    'fieldtripalpha',NaN,...
    'fieldtripmethod','montecarlo',...
    'fieldtripmcorrect','fdr',...
    'fieldtripnaccu',4000);
stats = STUDY.etc.statistics;
stats.paired{1} = 'on'; % Condition stats
stats.paired{2} = 'off'; % Group stats

%## CLUSTER INFO
%-- 01192025_mim_yaoa_nopowpow_crit_speed (rb3)
cluster_titles = {'Right Posterior Parietal', ...
    'Right Sensorimotor', ...
    'Left Precuneus', ... %'Anterior Cingulate', ...
    'Left Sensorimotor', ...
    'Right Premotor',...
    'Left Posterior Parietal', ...
    'Left Supplementary Motor', ...
    'Right Occipital', ...
    'Mid Cingulate',...
    'Left Temporal',...
    'Left Occipital'};
out = cellfun(@(x) regexp(x,'(.).*\s(...)','tokens'),cluster_titles);
output_titles = cellfun(@(x) strjoin(x,''),out,'UniformOutput',false);
fig_n = 1:length(cluster_titles);
%##
g_chars = {'H1000','H2000','H3000'};
g_chars_topo = {'Young Adults','Older High Func. Adults','Older Low Func. Adults'};
g_chars_subp = {'YA','OHFA','OLFA'};
% dip_dir = [cluster_k_dir filesep 'topo_dip_inf' filesep 'all'];
dip_dir = [cluster_k_dir filesep 'topo_dip_inf' filesep 'valid_clusts'];
cmaps_speed = linspecer(4*3);
%## EXTRACT PSD DATA
spcolor_dark = [cmaps_speed(1,:);cmaps_speed(2,:);cmaps_speed(3,:);cmaps_speed(4,:)]; %color.speed;
xtick_label_g = {'0.25','0.50','0.75','1.0'};
%% ===================================================================== %%
%## PARAMETERS
%-
designs = unique(KIN_TABLE.model_n);
group_chars = unique(KIN_TABLE.group_char);
cond_chars = unique(KIN_TABLE.cond_char);
clusters = unique(RSTATS_IMPORT.cluster_num);
clusters = clusters(clusters~=0);
%--
SAVE_RES = 300;

%## 
AXES_DEFAULT_PROPS = {'box','off', ...
    'xtick',[], ...
    'ytick',[],...
    'ztick',[], ...
    'xcolor',[1,1,1], ...
    'ycolor',[1,1,1]};

%## PSD PLOTS
label_struct = struct('Units','normalized',...
    'FontName','Arial', ...
    'FontSize',8, ...
    'FontWeight','bold');
ax_struct = struct('box','off', ...
    'LineWidth',1, ...
    'FontWeight','normal', ...
    'FontName','Arial', ...
    'FontSize',8, ...
    'OuterPosition',[0 0 1 1], ...
    'Position',[0.3,0.3,0.5,0.5]);
title_props_struct = struct('Units','normalized',...
    'FontName','Arial', ...
    'FontSize',8, ...
    'FontWeight','bold');
psd_line_struct = struct('LineWidth',2, ...
    'LineStyle','-', ...
    'DisplayName','line', ...
    'Color',[0.5,0.5,0.5,0.65] ...
    );
err_bnd_struct = struct( ...
    'LineStyle',':', ...
    'LineWidth',3, ...
    'FaceAlpha',0.6, ...
    'EdgeColor','none', ...
    'FaceColor',[0.5,0.5,0.5]);
%--
PPLOT_STRUCT = struct( ...
    'ylim',[],...
    'y_label',{'10*log_{10}(PSD)'},...
    'do_set_ax_props',true, ...
    'y_label_props',label_struct, ...
    'y_label_offset',[0,0],...
    'xlim',[fooof_freqs(1),fooof_freqs(end)],...
    'x_label',{'Frequency (Hz)'},...
    'x_label_props',label_struct, ...
    'x_label_offset',[0,0],...
    'xtick_labs',{{}}, ...
    'xticks',[], ...
    'xtick_angle',45, ...
    'title',{{''}},...
    'title_props',title_props_struct, ...
    'ax_props',ax_struct);
PLINE_STRUCT = struct('do_line_avg',false, ...
    'line_props',psd_line_struct, ...
    'line_avg_fcn',@(x) mean(x,1), ...
    'do_err_shading',true, ...
    'err_bnd_props',err_bnd_struct, ...
    'err_bnd_vec',[]);

%## VIOLIN PLOTS
label_struct = struct('Units','normalized',...
    'FontName','Arial', ...
    'FontSize',8, ...
    'FontWeight','bold');
group_anno_struct = struct(...
    'FontName','Arial', ...
    'FontSize',8, ...
    'FontWeight','normal', ...
    'HorizontalAlignment','center',...
    'Units','data');
ax_struct = struct('box','off', ...
    'LineWidth',1, ...
    'FontWeight','normal', ...
    'FontName','Arial', ...
    'FontSize',12, ...
    'OuterPosition',[0 0 1 1], ...
    'Position',[0.3,0.3,0.5,0.5]);
title_props_struct = struct('Units','normalized',...
    'FontName','Arial', ...
    'FontSize',8, ...
    'FontWeight','bold');
stats_char_struct = struct('FontSize',9,...
    'FontName','Arial',...
    'FontWeight','bold', ...
    'Units','normalized');
reg_line_struct = struct('LineStyle','-', ...
    'Color','k', ...
    'LineWidth',2);
DEF_VPLOT_STRUCT = struct('color_map',spcolor_dark,...
    'cond_labels',{{'0.25','0.50','0.75','1.0'}},...
    'cond_offsets',[-0.35,-0.1,0.15,0.40],...
    'do_group_labels',true, ... % group props
    'do_combine_groups',false,...
    'group_labels',{{'YA','OHFA','OLFA'}},...
    'group_offsets',[0.125,0.475,0.812],...
    'group_label_offset',[0,-0.285],...
    'group_label_props',group_anno_struct, ...
    'y_label',{{''}},... % y-label props
    'ytick',[], ... 
    'ytick_labs',{{''}}, ...
    'y_label_props',label_struct, ...
    'y_label_offset',[0,0], ...
    'ylim',[],...
    'x_label',{{'Speed (m/s)'}},... % x-label props
    'x_label_props',label_struct, ...
    'x_label_offset',[0,-0.1],...
    'xlim',[],...
    'xtick',[], ...
    'xtick_labs',{{''}}, ...
    'xtick_angle',75,...
    'title',{{''}},... % title props
    'title_props',title_props_struct, ...
    'ax_props',ax_struct, ... % ax props
    'stats_char_props',stats_char_struct, ... % stats & scatter props
    'reg_line_props',reg_line_struct, ...
    'scatter_props',struct(...
        'SizeData',4, ...
        'Marker','*', ...
        'CData',[0,0,0], ...
        'jitter','on', ...
        'jitterAmount', 0.05));
VIO_STRUCT = struct('Width',0.15,...
    'ShowWhiskers',false,...
    'ShowNotches',false,...
    'ShowBox',true,...
    'ShowMedian',true,...
    'Bandwidth',0.1,...
    'QuartileStyle','shadow',...
    'HalfViolin','full',...
    'DataStyle','scatter',...
    'MarkerSize',8,...
    'EdgeColor',[0.5,0.5,0.5],...
    'ViolinAlpha',{{0.3,0.4}},...
    'do_plot_outlier_marks',true,...
    'use_raw_bandwidth',false);
BRACKET_STRUCT = struct('sig_sign','+',...
    'line_specs',{{'LineStyle','-','LineWidth',2,'Color','k'}},...
    'text_specs',{{'FontSize',8,'FontName','Arial','FontWeight','bold'}},...
    'bracket_conn',[],...
    'conn_offset_y_upper',[],...
    'bracket_offset_y_upper',0,...
    'bracket_offset_y_lower',0,...
    'sig_offset_x',0,...
    'sig_offset_y',[]);
SIGLINE_STRUCT = struct('sig_sign','*',...
    'line_specs',{{'LineStyle','-','LineWidth',2,'Color','k'}},...
    'text_specs',{{'FontSize',8,'FontName','Arial','FontWeight','bold'}},...
    'conn_y',[],...
    'conn_offset_y',[],...
    'sig_offset_x',0,...
    'sig_offset_y',0);

%## MODELS
% COEFF_CHARS_INT = {'(Intercept)','speed_cond_num','group_char1','group_char2', ...
%     'speed_cond_num:group_char1','speed_cond_num:group_char2'};
% ANV_CHARS_INT = {'(Intercept)','speed_cond_num','group_char','speed_cond_num:group_char'};
% ANV_CHARS_GROUP = {'(Intercept)','speed_cond_num','group_char'};
% COEFF_CHARS_GROUP = {'(Intercept)','speed_cond_num','group_char1','group_char2'};
%## MODELS
COEFF_CHARS_INT = {'(Intercept)','speed_cond_num','group_char1','group_char2', ...
    'speed_cond_num:group_char1','speed_cond_num:group_char2'};
ANV_CHARS_INT = {'(Intercept)','speed_cond_num','group_char','speed_cond_num:group_char'};
ANV_CHARS_GRP = {'(Intercept)','speed_cond_num','group_char'};
COEFF_CHARS_GRP = {'(Intercept)','speed_cond_num','group_char1','group_char2'};
%--
%--
%% (ALL SUBJS MODEL) =================================================== %%
% meas_ext = 'combo_per';
meas_ext = 'combo_inform';
tmp_savedir = [save_dir filesep fextr '_manufigs'];
mkdir(tmp_savedir);
DO_RECALC_PSD_STATS = false;

% cluster_inds_plot = [3,4,5,6,7,8,9,10,11,12,13];
% cluster_inds_plot = [3,4,5,6,7,8,9,11,12];
cluster_inds_plot = [10,12,13];
FG_TXT_SZ = 1;
TOPO_FG_RESIZE = 1;
DIP_FG_RESIZE = 1;
PSD_FG_RESIZE = 1;
VIO_FG_RESIZE = 1;
%--
% PSDM_YLIM = [-0.35,3.5];
% PSDM_YTICKS = [0,1,2,3];
% PSDM_YTICK_LABS = string(PSDM_YTICKS);
%--
% PSDS_YLIM = [0.275,0.425];
% PSDS_YTICKS = [0.28,0.32,0.36,0.40];
% PSDS_YTICK_LABS = ["0.28","0.32","0.36","0.40"]; %string(PSDS_YTICKS);
PSDS_YLIM = [1.5,2.5];
PSDS_YTICKS = [1.5,2,2.5];
PSDS_YTICK_LABS = string(PSDS_YTICKS); %["0.28","0.32","0.36","0.40"]; %string(PSDS_YTICKS);
%--
PSDM_YLIM = [-0.35,3.5];
PSDM_YTICKS = [0,1,2,3];
PSDM_YTICK_LABS = string(PSDM_YTICKS);
%--
% PSDS_YLIM = [0.275,0.425];
% PSDS_YTICKS = [0.28,0.32,0.36,0.4];
% PSDS_YTICK_LABS = string(PSDS_YTICKS);
%--
VIOT_YLIM = [1.5,2.75];
VIOT_YTICKS = [1.5,2.0,2.5];
VIOT_YTICK_LABS = string(VIOT_YTICKS);
%--
VIOB_YLIM = [1.5,2.75];
VIOB_YTICKS = [1.5,2.0,2.5];
VIOB_YTICK_LABS = string(VIOB_YTICKS);
%--
% VIOB_YLIM = [1.4,2];
% VIOB_YTICKS = [1.4,1.6,1.8,2];
% VIOB_YTICK_LABS = string(VIOB_YTICKS);
%--
% VIOT_YLIM = [0.25,0.45];
% VIOT_YTICKS = [0.25,0.35,0.45];
% VIOT_YTICK_LABS = string(VIOT_YTICKS);d
% %--
% VIOB_YLIM = [0.25,0.45];
% VIOB_YTICKS = [0.25,0.35,0.45];
% VIOB_YTICK_LABS = string(VIOB_YTICKS);
%--
FG_SHIFT_Y = -0.26;
FG_SHIFT_X = 0.5;
FG_INIT_X = -0.025;
FG_INIT_Y = -0.04;
ieee_sz = [8.5-(0.65*2),11-(0.7*2)];

%% COMBO LSM, RSM, LPP, RPP FIGURE ========================================
tmpl = [];
for cl_i = 1:length(cluster_inds_plot)
    %%
    %-- initiate params
    cl_ii = find(cluster_inds_plot(cl_i) == double(string(clusters)));
    cl_n = double(string(clusters(cl_ii)));
    atlas_name = cluster_titles{cl_ii};

    %## INITIATE FIGURE    
    fy_shift = FG_INIT_Y;
    fx_shift = FG_INIT_X;
    fx_cnt = 1;
    fy_cnt = 1;
    FX_DIM = 1;
    %-- title
    FONT_NAME = 'Arial';
    TITLE_XSHIFT = 0.4;
    TITLE_YSHIFT = 0.975+fy_shift;
    %-- fig
    fig = figure('color','white');
    set(fig,'Units','inches', ...
        'Position',[0.5,0.5,ieee_sz], ...
        'PaperUnits','inches', ...
        'PaperSize',[1 1], ...
        'PaperPosition',[0 0 1 1]);
    p_sz = get(fig,'Position');
    set(gca,AXES_DEFAULT_PROPS{:});
    hold on;

    %## TOPOGRAPHY PLOT
    FG_FIX = [1,1];
    IM_RESIZE = 0.175*TOPO_FG_RESIZE;
    AX_INIT_Y = 0.79*FG_FIX(2)+fy_shift;
    AX_INIT_X = 0.075*FG_FIX(1)+fx_shift;
    g_chars_topo = {'YA','OHFA','OLFA'};
    study_g_chars = {'H1000','H2000','H3000'};
    %-- group title counts
    topo_title = cell(length(study_g_chars),1);
    for g_i = 1:length(study_g_chars)
        g_inds = cellfun(@(x) strcmp(x,study_g_chars{g_i}), ...
            {STUDY.datasetinfo(STUDY.cluster(cl_n).sets).group});
        if length(g_chars_topo{g_i}) == 1 || ischar(g_chars_topo{g_i})
            topo_title{g_i}=sprintf('%s N=%i', ...
                g_chars_topo{g_i},sum(g_inds));
        else
            topo_title{g_i}=sprintf('%s\n%s N=%i', ...
                g_chars_topo{g_i}{1},g_chars_topo{g_i}{2},sum(g_inds));
        end
    end
    %--
    tp_struct = struct('font_name','Arial', ...
        'font_size',8*FG_TXT_SZ, ...
        'font_weight','normal', ...
        'title',{topo_title}, ...
        'im_resize',IM_RESIZE, ...
        'position',[AX_INIT_X,AX_INIT_Y,0,0]);
    %--
    local_plot_topography(fig,STUDY,cl_n, ...
        tp_struct);
    
    %## DIPOLE PLOT
    FG_FIX = [1,1];
    AX_SHIFT = [-0.0325,-0.18];
    % DIP_IM_DPI = 1000;
    tys = AX_INIT_Y+AX_SHIFT(2)*FG_FIX(2); 
    txs = AX_INIT_X+AX_SHIFT(1)*FG_FIX(1);
    % IM_RESIZE = 2*DIP_FG_RESIZE;
    tp_struct = struct(...
        'position',[txs,tys,0,0], ...
        'im_resize',1.85*DIP_FG_RESIZE, ...
        'pg_size',p_sz, ...
        'dip_sz',8*FG_TXT_SZ, ...
        'dip_line_width',0.005, ...
        'dip_border_col',[0,0,0], ...
        'dip_alpha',0.9, ...
        'lin_line_width',0.5, ...
        'lin_line_col',[0,0,0,0.3], ...
        'lin_line_style','--');
    dip_fig_path = [dip_dir filesep sprintf('%i_dipplot_alldipspc_angle.fig',cl_n)];
    %--
    local_plot_dipole_angle(fig,dip_fig_path,tp_struct);
    
    %## LETTER ANNOTATION
    FG_ANN_FIX = [1,1];
    ANNO_SHIFT = [-0.09,0.065];
    ltxs = AX_INIT_X+ANNO_SHIFT(1)*FG_ANN_FIX(1)+(0.1/2);
    ltys = AX_INIT_Y+ANNO_SHIFT(2)*FG_ANN_FIX(2)+(0.1/2);
    ANNO_POS = [ltxs,ltys,0.1,0.1];
    annotation(fig,'textbox',ANNO_POS,...
        'String',sprintf('%s','A'), ...
        'HorizontalAlignment','left',...
        'VerticalAlignment','top', ...
        'LineStyle','none', ...
        'FontName','Arial',...
        'FontSize',14*FG_TXT_SZ, ...
        'FontWeight','Bold', ...
        'Units','normalized');

    %## CLUSTER TITLE
    FG_TIT_FIX = [1,1];
    TIT_BOX_SZ = [0.5,0.1];
    TIT_SHIFT = [-AX_INIT_X,0.135];    
    ttxs = AX_INIT_X+TIT_SHIFT(1)*FG_TIT_FIX(1)+(1-TIT_BOX_SZ(1))/2;
    ttys = AX_INIT_Y+TIT_SHIFT(2)*FG_TIT_FIX(2)+(TIT_BOX_SZ(2)/2);
    TIT_POS = [ttxs,ttys,TIT_BOX_SZ(1),TIT_BOX_SZ(2)];
    annotation('textbox',TIT_POS,...
        'String',atlas_name, ...
        'HorizontalAlignment','center',...
        'VerticalAlignment','middle', ...
        'LineStyle','none', ...
        'FontName',FONT_NAME,...
        'FontSize',16*FG_TXT_SZ, ...
        'FontWeight','Bold', ...
        'Units','normalized');
    
    % EXTRACT PSD DATA =============================================== %%    
    %## (STD-MEAN PLOT)
    % FG_TXT_SZ = 0.5;
    FG_FIX = [1,1];    
    FG_FIX_SHIFT = 1;
    FG_LEG_FIX = [1,1];
    FG_ANN_FIX = [1,1];
    %--
    IM_RESIZE = 0.7*PSD_FG_RESIZE;  
    AX_SHIFT = [0.385,0.0]*IM_RESIZE;
    AX_SZ = [0.325,0.225];  
    AX_X_SLIDE = 1.4*FG_FIX_SHIFT;
    txs = AX_INIT_X+AX_SHIFT(1)*FG_FIX(1); %0.375*FG_FIX(1)+fx_shift; 
    tys = AX_INIT_Y+AX_SHIFT(2)*FG_FIX(2); %0.75*FG_FIX(2)+fy_shift; 
    Y_LIM_SCALE = 1.5;
    %--
    ANNO_SHIFT = [-0.12,0.065];
    ltxs = txs+ANNO_SHIFT(1)*FG_ANN_FIX(1)+(0.1/2); %0.7069*FG_FIX(1)+fx_shift+LAB_B_YOFFSET+(0.1/2);
    ltys = tys+ANNO_SHIFT(2)*FG_ANN_FIX(2)+(0.1/2); %+fy_shift+LAB_B_XOFFSET+(0.1/2);
    ANNO_POS = [ltxs,ltys,0.1,0.1];
    %-- 
    leg_store = [];
    LEG_OPOS = [-0.155,0.0935];
    LEG_OPOS = LEG_OPOS.*FG_LEG_FIX;

    %## (STD-MEAN) GET PSD DATA
    dat_out_struct = dat_out_structs{1};
    dat_calcs = {'mean','mean'};
    conds_out = {'0p25','0p5','0p75','1p0'};
    groups_out = g_chars;
    [psd_dat_out] = extract_psd_sbs(dat_out_struct,dat_calcs,cl_n,conds_out,groups_out);
    psd_dat_in = psd_dat_out;
    
    %## PLOT PARAMETERS
    tl_struct = PLINE_STRUCT;
    tl_struct.line_avg_fcn = @(x) mean(x,2);
    tl_struct.do_err_shading = true;
    %--
    tp_struct = PPLOT_STRUCT;    
    tp_struct.title = {'Mean PSD Signature'};  
    mu = mean(cat(2,psd_dat_in{:}),[2,1]);
    sd = std(cat(2,psd_dat_in{:}),[],[2,1]);
    %--
    tp_struct.ylim = [mu-Y_LIM_SCALE*sd,mu+Y_LIM_SCALE*sd];
    tp_struct.y_label = '10*log_{10}(PSD_{Ns})';
    tp_struct.title_props.FontSize = 10*FG_TXT_SZ;
    tp_struct.y_label_props.FontSize = 10*FG_TXT_SZ;
    tp_struct.y_label_offset = [0,0.05];
    tp_struct.x_label_props.FontSize = 10*FG_TXT_SZ; 
    tp_struct.ax_props.Position = [txs,tys,AX_SZ(1)*IM_RESIZE,AX_SZ(2)*IM_RESIZE];
    tp_struct.ax_props.FontSize = 10*FG_TXT_SZ;
    %--
    psd_params = [];
    %--
    psd_params.y_lims = PSDM_YLIM;
    psd_params.yticks = PSDM_YTICKS;
    psd_params.ytick_labs = PSDM_YTICK_LABS;
    psd_params.do_display_leg = false;
    psd_params.line_plot_opt = 'group'; %'group';
    psd_params.xtick_label = xtick_label_g;
    psd_params.xtick_label_g = g_chars_subp;
    psd_params.xtick_label_c = xtick_label_g;
    psd_params.freqs = fooof_freqs;
    psd_params.line_styles = {'-','-.','--'};
    %--
    psd_params.cmaps = linspecer(length(g_chars_subp));
    psd_params.cmaps = cmaps_speed; %linspecer(length(g_chars_subp));
    psd_params.cmaps_scond = cmaps_speed;
    psd_params.cmaps_sgroup = linspecer(length(g_chars_subp));
    tmp = linspecer(50);
    psd_params.cmaps_stats = tmp([10,30,40],:);
    %--
    psd_params.leg_position = LEG_OPOS; %[0.115*FG_ANN_FIX(1),0.07*FG_ANN_FIX(2)]; %[0.09,0.065]; %[AX_INIT_X+LEG_X_SHIFT*IM_RESIZE*AX_W,y_shift+AX_H*IM_RESIZE+LEG_Y_SHIFT*IM_RESIZE*AX_H];
    psd_params.leg_token_size = 20*FG_TXT_SZ;
    psd_params.legends_specs = {'FontName','Arial', ...
        'FontSize',10*FG_TXT_SZ, ...
        'FontWeight','bold',...
        'Orientation','Horizontal', ...
        'Units','normalized'};
    psd_params.bandmark_shifts = [0.9,0.9,0.9,0.9;
                                0.17,0.265,0.49,0.79];

    
    %## PLO
    fname = sprintf('cl%i_inter_%s_stats.mat',cl_n,strjoin(dat_calcs,''));
    if exist([tmp_savedir filesep fname],'file') && ~DO_RECALC_PSD_STATS
        psd_params.stats_in = par_load([tmp_savedir filesep fname]);
    else
        psd_params.stats_in = [];
        psd_params.stats = stats;
        psd_params.stats.condstats = 'on';
        psd_params.stats.groupstats = 'on';
        psd_params.stats.paired = {'on','off'};
    end
    %--
    ax = axes();
    [psd_paramso] = local_psd_plot_inter(ax,psd_dat_in,psd_params,tp_struct,tl_struct);
    leg_store = [leg_store; psd_paramso.stats_store];
    %--
    if ~exist([tmp_savedir filesep fname],'file') || DO_RECALC_PSD_STATS
        par_save(psd_paramso.stats_in,[tmp_savedir filesep fname]);
    end
    
    % PSD PLOTS =======================================================   
    %## (MEAN-MEAN) GET PSD DATA
    dat_out_struct = dat_out_structs{1};
    dat_calcs = {'std','mean'};
    conds_out = {'0p25','0p5','0p75','1p0'};
    groups_out = g_chars;
    [psd_dat_out] = extract_psd_sbs(dat_out_struct,dat_calcs,cl_n,conds_out,groups_out);
    psd_dat_in = psd_dat_out;
    
    %## PLOT
    txs = txs + AX_SZ(1)*IM_RESIZE*AX_X_SLIDE;
    %--
    mu = mean(cat(2,psd_dat_in{:}),[2,1]);
    sd = std(cat(2,psd_dat_in{:}),[],[2,1]);
    tp_struct.title = {'SD PSD Signature'};  
    tp_struct.y_label = '10*log_{10}(PSD_{Ns})';
    tp_struct.ylim = [mu-Y_LIM_SCALE*sd,mu+Y_LIM_SCALE*sd];
    tp_struct.ax_props.Position = [txs,tys,AX_SZ(1)*IM_RESIZE,AX_SZ(2)*IM_RESIZE];
    %--
    % psd_params.y_lims = PSDM_YLIM;
    % psd_params.yticks = PSDM_YTICKS;
    % psd_params.ytick_labs = PSDM_YTICK_LABS;
    psd_params.y_lims = PSDS_YLIM;
    psd_params.yticks = PSDS_YTICKS;
    psd_params.ytick_labs = PSDS_YTICK_LABS;
    %--
    fname = sprintf('cl%i_inter_%s_stats.mat',cl_n,strjoin(dat_calcs,''));
    if exist([tmp_savedir filesep fname],'file') && ~DO_RECALC_PSD_STATS
        psd_params.stats_in = par_load([tmp_savedir filesep fname]);
    else
        psd_params.stats_in = [];
        psd_params.stats = stats;
        psd_params.stats.condstats = 'on';
        psd_params.stats.groupstats = 'on';
        psd_params.stats.paired = {'on','off'};
    end
    %--
    ax = axes();
    [psd_paramso] = local_psd_plot_inter(ax,psd_dat_in,psd_params,tp_struct,tl_struct);
    % xlabel(ax,'Frequency (Hz)');
    % ylabel(ax,'<<10*log_{10}(PSD_{N})>>');
    %--
    if ~exist([tmp_savedir filesep fname],'file')
        par_save(psd_paramso.stats_in,[tmp_savedir filesep fname]);
    end
    
    %## LEGEND INSERTION  
    if fx_cnt == 1 && fy_cnt == 1
        KEY_BOXSZ = [0.6,0.0275];            
        if length(tmpl) ~= 6
            tmpl = [leg_store; psd_paramso.stats_store];
            tmpl = tmpl(~cellfun(@isempty,tmpl));
            inds = cellfun(@(x) x.DisplayName,tmpl,'UniformOutput',false);
            indsu = unique(inds);
            out = zeros(length(indsu),1);
            for i = 1:length(indsu)
                tmp = find(strcmp(indsu{i},inds));
                out(i) = tmp(1);
            end
            tmpl = tmpl(out);
            tmpl = [psd_paramso.leg_store;tmpl];   
        end
        %##
        % psd_params.leg_position = [-0.225,0.07];
        %-- legend
        legend(gca,[tmpl{:}]);
        [lg,~,~,~]  = legend('boxon');
        tmp = get(lg,'String');
        %-- specs        
        set(lg,'String',tmp, ...
            'Position',[lg.Position(1)+psd_params.leg_position(1),...
                lg.Position(2)+psd_params.leg_position(2), ...
                lg.Position(3),lg.Position(4)], ...
            psd_params.legends_specs{:});
        key_pos_store = [lg.Position(1),...
                lg.Position(2), ...
                KEY_BOXSZ];
        set(lg,'Position',key_pos_store);
        
        lg.ItemTokenSize(1) = psd_params.leg_token_size;
        hold off;
    end

    %## LETTER    
    annotation(fig,'textbox',ANNO_POS,...
        'String',sprintf('%s','B'), ...
        'HorizontalAlignment','left',...
        'VerticalAlignment','top', ...
        'LineStyle','none', ...
        'FontName','Arial',...
        'FontSize',14*FG_TXT_SZ, ...
        'FontWeight','Bold', ...
        'Units','normalized');

    % VIOLIN PLOTS) ================================================== %%
    %--
    FG_FIX = [1,1];
    FG_ANN_FIX = [1,1];
    FG_FIX_SHIFT = [1,1];
    %--
    IM_RESIZE = 0.7*VIO_FG_RESIZE;
    AX_SZ = [0.35,0.225];
    % AX_SHIFT = [0.385,-0.325]*IM_RESIZE;
    AX_SHIFT = [0.385,-0.38]*IM_RESIZE;
    AX_SLIDE = [1.35,-1.35].*FG_FIX_SHIFT;
    %--
    PRC_YLIM = [3,97];
    YLIM_FAC = 2;
    txs = AX_INIT_X+AX_SHIFT(1)*FG_FIX(1);
    tys = AX_INIT_Y+AX_SHIFT(2)*FG_FIX(2);
    X_DIM = 4;
    DES_I = 2;
    %--
    ANNO_SHIFT = [-0.12,0.075];
    ltxs = txs+ANNO_SHIFT(1)*FG_ANN_FIX(1)+(0.1/2); %0.7069*FG_FIX(1)+fx_shift+LAB_B_YOFFSET+(0.1/2);
    ltys = tys+ANNO_SHIFT(2)*FG_ANN_FIX(2)+(0.1/2); %+fy_shift+LAB_B_XOFFSET+(0.1/2);
    ANNO_POS = [ltxs,ltys,0.1,0.1];
    %-- cov measures
    % EEG_MEASURES = {'cov_i_avg_theta_fn1', ...
    %     'cov_i_avg_beta_fn1'};
    % EEG_MEASURE_TITLES = {'COV(\theta)', ...
    %     'COV(\beta)'};
    % EEG_MEASURE_LABS = {'<log_{10}(COV(\theta_{Ns}))>', ...
    %     '<log_{10}(COV(\beta_{Ns}))>'};
    %--
    EEG_MEASURES = {'std_avg_theta_fn1', ...
        'std_avg_beta_fn1'};
    EEG_MEASURE_TITLES = {'SD \theta_{Ns}', ...
        'SD \beta_{Ns}'};
    EEG_MEASURE_LABS = {'SD(10*log_{10}(PSD_{Ns}))', ...
        'SD(10*log_{10}(PSD_{Ns}))'};
    %--
    % EEG_MEASURES = {'std_avg_theta', ...
    %     'std_avg_beta'};
    % EEG_MEASURE_TITLES = {'SD \theta_{Ns}', ...
    %     'SD \beta_{Ns}'};
    % EEG_MEASURE_LABS = {'SD(10*log_{10}(PSD_{Ns}))', ...
    %     'SD(10*log_{10}(PSD_{Ns}))'};
    %--
    x_shift = txs;   
    y_shift = tys;
    y_lims = zeros(length(EEG_MEASURES),2);
    ax_s = cell(length(EEG_MEASURES),1);
    x_cnt = 1;
    for e_i = 1:length(EEG_MEASURES)
        %##
        cond_plot_store = [];
        group_plot_store = [];        
        eeg_measure = EEG_MEASURES{e_i};
    
        %## SUB-SELECT DATA
        inds = strcmp(KIN_TABLE.model_n,num2str(DES_I)) & ...
            KIN_TABLE.cluster_n == cl_n & ...
            ~isnan(KIN_TABLE.(eeg_measure)); %num2str(cl_n);
        % inds = KIN_TABLE.model_n == DES_I & ...
        %     KIN_TABLE.cluster_n == cl_n & ...
        %     ~isnan(KIN_TABLE.(eeg_measure)); %num2str(cl_n);
        tmp_tbl = KIN_TABLE(inds,:); 
        prc_ylim = [round(prctile(tmp_tbl.(eeg_measure),PRC_YLIM(1))-YLIM_FAC*std(tmp_tbl.(eeg_measure)),1),...
                    round(prctile(tmp_tbl.(eeg_measure),PRC_YLIM(2))+YLIM_FAC*std(tmp_tbl.(eeg_measure)),1)];
    
        %## EXTRACT STATS INFO
        % STR_FONT_SZ = 8*FG_TXT_SZ;
        % STR_FONT_SZ = 5*FG_TXT_SZ;
        % EXTRACT_STRUCT = struct( ...
        %     'group_chars', {{'H1000','H2000','H3000'}}, ...
        %     'group_order', categorical({'H1000','H2000','H3000'}), ...
        %     'model_char_int', 'speed_group_intact_all', ...
        %     'model_char_group', 'speed_group_all', ...
        %     'group_char', 'all', ...
        %     'anv_chars_int', {ANV_CHARS_INT}, ...
        %     'anv_chars_group', {ANV_CHARS_GROUP}, ...
        %     'coeff_chars_int', {COEFF_CHARS_INT}, ...
        %     'coeff_chars_group', {COEFF_CHARS_GROUP}, ...
        %     'eeg_measure', {EEG_MEASURES{e_i}}, ...
        %     'kin_measure', {'none'}, ...
        %     'coeff_study', {'speed'}, ...
        %     'str_option',{'information'}, ... %'simple',...
        %     'str_offset', [-0.1, -0.05], ...
        %     'str_font_size', STR_FONT_SZ, ...
        %     'ci_bar_width', 0.15, ...
        %     'ci_bar_xpos', 0, ...
        %     'ci_bar_linespecs', {{'LineStyle','-','LineWidth',2,'Color','k'}}, ...
        %     'coeff_desm', [ ...                
        %         0, 1; ...                
        %        -1,-1; ...
        %         1, 0 ...
        %     ] ...
        % );
        % %--
        % % [STATS_STRUCT,CONFINT_STRUCT,ranef] = extract_violin_stats(RSTATS_IMPORT,cl_n,params);
        % [tmp_stats_struct,tmp_confint_struct,ranef,rawdat] = get_r_stats_func(RSTATS_IMPORT,cl_n, ...
        %     'EXTRACT_STRUCT',EXTRACT_STRUCT);

        %## EXTRACT STATS INFO
        anl_type = 'interaction';
        cai = 2;
        gai = 3;
        iai = 4;
        EXTRACT_STRUCT = struct( ...
            'model_char', 'speed_group_intact_all', ...
            'group_char', 'all', ...
            'anv_chars', {ANV_CHARS_INT}, ...
            'coeff_chars', {COEFF_CHARS_INT}, ...
            'eeg_measure', {EEG_MEASURES{e_i}}, ...
            'kin_measure', {'none'}, ...
            'coeff_desm', [ ...
                1, 0; ...
                0, 1; ...
               -1,-1 ...
            ] ...
        );    
        %--
        % [STATS_STRUCT,CONFINT_STRUCT,ranef] = extract_violin_stats(RSTATS_IMPORT,cl_n,params);
        [ranef,rawvalues,stbl] = get_r_stats_func(RSTATS_IMPORT,cl_n, ...
            'EXTRACT_STRUCT',EXTRACT_STRUCT);
        
        if rawvalues.anova_pv(4) > 0.05
            EXTRACT_STRUCT = struct( ...
                'model_char', 'speed_group_all', ...
                'group_char', 'all', ...
                'anv_chars', {ANV_CHARS_GRP}, ...
                'coeff_chars', {COEFF_CHARS_GRP}, ...
                'eeg_measure', {EEG_MEASURES{e_i}}, ...
                'kin_measure', {'none'});
            [ranef,rawvalues,stbl] = get_r_stats_func(RSTATS_IMPORT,cl_n, ...
            'EXTRACT_STRUCT',EXTRACT_STRUCT);
            anl_type = 'group';
            cai = 2;
            gai = 3;
            iai = 4;
        end
        EXTRACT_STRUCT = struct( ...
            'group_chars', {{'H1000','H2000','H3000'}}, ...
            'group_order', categorical({'H1000','H2000','H3000'}), ...
            'str_option',{'simple'}, ...
            'str_offset', [-0.1, -0.05], ...
            'str_font_size', 5*FG_TXT_SZ, ...
            'do_extract_raw',false, ...
            'cond_anvind',cai, ...
            'grp_anvind',gai, ...
            'inact_anvind',iai, ...
            'ci_bar_width', 0.15, ...
            'ci_bar_xpos', 0, ...
            'ci_bar_linespecs', {{'LineStyle','-','LineWidth',2,'Color','k'}}, ...
            'coeff_desm', [ ...
                1, 0; ...
                0, 1; ...
               -1,-1 ...
            ] ...
        );
        [tmp_stats_struct,tmp_confint_struct] = get_violin_rstats(rawvalues,anl_type,...
            'EXTRACT_STRUCT',EXTRACT_STRUCT);
        
        %## NORMALIZE DATA USING SUBJECT INTERCEPTS
        if ~isempty(ranef.char)
            for s_i = 1:length(ranef.char)
                int = ranef.int(s_i);
                ind = strcmp(ranef.char{s_i},tmp_tbl.subj_char);
                tmp_tbl(ind,eeg_measure) = tmp_tbl(ind,eeg_measure)-int;
            end
        end
        %## PLOT
        %-- set parameter
        tmp_vio_struct = VIO_STRUCT;
        tmp_vio_struct.MarkerSize = 8*FG_TXT_SZ*0.8;
        tmp_vio_struct.vio_edge_alpha = 0.9;
        tmp_vio_struct.vio_edge_lw = 0.5*FG_TXT_SZ; 
        %--
        tp_struct = DEF_VPLOT_STRUCT;
        tp_struct.scatter_props.SizeData = 4*FG_TXT_SZ;
        tp_struct.title_props.FontSize = 10*FG_TXT_SZ;
        tp_struct.x_label_offset = [0,-0.17];
        tp_struct.x_label_props.FontSize = 10*FG_TXT_SZ;
        tp_struct.y_label_props.FontSize = 10*FG_TXT_SZ;
        tp_struct.group_label_props.FontSize = 10*FG_TXT_SZ;
        tp_struct.group_label_offset = [0,-0.29];
        tp_struct.ax_props = struct('box','off', ...
            'LineWidth',1, ...
            'FontWeight','normal', ...
            'FontName','Arial', ...
            'FontSize',10*FG_TXT_SZ, ...
            'OuterPosition',[0 0 1 1], ...
            'Position',[x_shift,y_shift,AX_SZ(1)*IM_RESIZE,AX_SZ(2)*IM_RESIZE]);
        tp_struct.group_labels = g_chars_subp; %params.group_chars; %g_chars_subp;
        tp_struct.color_map = spcolor_dark;
        tp_struct.title = EEG_MEASURE_TITLES(e_i);
        tp_struct.y_label = EEG_MEASURE_LABS{e_i};
        tp_struct.x_label = 'Speed (m/s)';
        tp_struct.ylim = []; %prc_ylim;
        switch e_i
            case 1
                tp_struct.ylim = VIOT_YLIM;
                tp_struct.ytick_labs = cellstr(VIOT_YTICK_LABS);
                tp_struct.ytick = VIOT_YTICKS;
            case 2
                tp_struct.ylim = VIOB_YLIM;
                tp_struct.ytick_labs = cellstr(VIOB_YTICK_LABS);
                tp_struct.ytick = VIOB_YTICKS;
        end
        %--
        tp_struct.scatter_props.SizeData = 4*FG_TXT_SZ;
        switch EXTRACT_STRUCT.str_option
            case 'information'
                tp_struct.stats_char_props.FontSize = 5*FG_TXT_SZ;
            case 'simple'
                tp_struct.stats_char_props.FontSize = 8*FG_TXT_SZ;
        end

        %%% PLOT VIO
        ax = axes();
        ax = group_violin(tmp_tbl,eeg_measure,'speed_n','group_char',...
            ax,...
            'VIOLIN_STRUCT',tmp_vio_struct,...
            'PLOT_STRUCT',tp_struct,...
            'STATS_STRUCT',tmp_stats_struct,...
            'BRACKET_STRUCT',BRACKET_STRUCT,...
            'SIGLINE_STRUCT',SIGLINE_STRUCT, ...
            'CONFINT_STRUCT',tmp_confint_struct);
        %-- ax sets
        y_lims(e_i,:) = get(ax,'YLim');
        ax_s{e_i} = ax;

        %## AX SHIFT
        if x_cnt < X_DIM
            x_shift = x_shift + AX_SLIDE(1)*IM_RESIZE*AX_SZ(1);
        else
            y_shift = y_shift + AX_SLIDE(2)*IM_RESIZE*AX_SZ(2);
            x_shift = AX_INIT_X;
            x_cnt = 0;
        end
        x_cnt = x_cnt + 1; 
    end

    %## TITLE    
    annotation(fig,'textbox',ANNO_POS,...
        'String',sprintf('%s','C'), ...
        'HorizontalAlignment','left',...
        'VerticalAlignment','top', ...
        'LineStyle','none', ...
        'FontName','Arial',...
        'FontSize',14*FG_TXT_SZ, ...
        'FontWeight','Bold', ...
        'Units','normalized');
    hold off;

    %## SIGNIFICANCE KEY
    SIG_K_PROPS = {'HorizontalAlignment','left',...
        'VerticalAlignment','top', ...
        'LineStyle','-', ...
        'FontName','Arial',...
        'FontSize',10, ...
        'FontWeight','bold', ...
        'Units','normalized'};
   
    % KEY_CHARS = {'Sig. Levels of P_{value}<0.05, 0.01, 0.001:' ...
    %     [sprintf('Interaction (S:G): %s, %s%s, %s%s%s   ',char(8225),char(8225),char(8225),char(8225),char(8225),char(8225)), ...
    %     'Speed (S): *, **, ***   ', ...
    %     'Group (G): +, ++, +++']};
    KEY_CHARS = ['P_{value}<0.05: ', ...
        'Speed (S): *  |  ', ...
        'Group (G): +  |  ', ...
        sprintf('Interaction (S:G): %s',char(8225))];
    FG_ANN_FIX = [1,1];
    % ANNO_BOXSZ = [0.6,0.05];
    ANNO_SHIFT = [-0.065,0.14];
    ltxs = txs+ANNO_SHIFT(1)*FG_ANN_FIX(1)+(0.1/2); %0.7069*FG_FIX(1)+fx_shift+LAB_B_YOFFSET+(0.1/2);
    ltys = tys+ANNO_SHIFT(2)*FG_ANN_FIX(2)+(0.1/2); %+fy_shift+LAB_B_XOFFSET+(0.1/2);
    ANNO_POS = [key_pos_store(1),ltys,key_pos_store(3:4)];
    annotation(fig,'textbox',ANNO_POS,...
        'String',KEY_CHARS, ...
        SIG_K_PROPS{:});


    %## FG SHIFT
    % if fx_cnt < FX_DIM
    %     fx_shift = fx_shift + FG_SHIFT_X;
    % else
    %     fy_shift = fy_shift + FG_SHIFT_Y;
    %     fx_shift = FG_INIT_X;
    %     fx_cnt = 0;
    %     fy_cnt = fy_cnt + 1;
    % end
    % fx_cnt = fx_cnt + 1;

    %##
    fname = sprintf('cl%i_%s_%s_manscript_plot',cl_n,output_titles{cl_ii},meas_ext);
    exportgraphics(fig,[tmp_savedir filesep fname '.pdf'],...
        'ContentType','Vector')
    % exportgraphics(fig,[tmp_savedir filesep fname '.png'],...
    %     'Resolution',SAVE_RES)
end
% close(fig)