# fext = 'allcond_perstridefb_mi_nfslidingb36'; # mean for averaging across band for mu and covi
fext = 'allcond_perstridefb_apfix_std_mi_nfslidingb36';
# fext = 'allcond_perstridefb_apfix_std_mi_nfslidingb100';
#(03/31/2025) JS, changed STD to Standard error (normalizing over the number of strides included in the average)
#%% CREATE SAVE DIR
#--
curr_dir <- getwd();
save_dir <- paste0(curr_dir,paste0("/",fext,"_tables_figs"))
dir.create(save_dir);
#%% LOAD
excel_dir <- paste0("/jsalminen/GitHub/MIND_IN_MOTION_PRJ/_data/MIM_dataset/_studies/02202025_mim_yaoa_powpow0p3_crit_speed/__iclabel_cluster_allcond_rb3/icrej_5/11/kin_eeg_step_to_step/sbs_eeg_psd_kin_",fext,".xlsx")
# fext = paste0(fext,"_rerun")
if(ispc()){
excel_dir <- paste0("M:",excel_dir)
}else{
excel_dir <- paste0("/blue/dferris",excel_dir);
}
orig_eegt <- read_excel(excel_dir,sheet="Sheet1")
dtbl <- orig_eegt %>%
select(subj_char,cond_char,speed_n,group_char,cluster_n,model_n,group_n,
std_avg_theta,std_avg_beta,std_avg_alpha,
std_ml_exc_mm_gc,std_ap_exc_mm_gc,std_ud_exc_mm_gc,
std_stance_dur,std_step_dur,std_single_sup_dur,std_double_sup_dur,
mu_avg_theta,mu_avg_beta,mu_avg_alpha,
mu_ml_exc_mm_gc,mu_ap_exc_mm_gc,mu_ud_exc_mm_gc,
mu_stance_dur,mu_step_dur,mu_single_sup_dur,mu_double_sup_dur,
cov_avg_theta,cov_avg_beta,cov_avg_alpha,
cov_ml_exc_mm_gc,cov_ap_exc_mm_gc,cov_ud_exc_mm_gc,
cov_stance_dur,cov_step_dur,cov_single_sup_dur,cov_double_sup_dur,cov_swing_dur);
#%% SELECT VALUES
# dtbl <- dtbl;
#%% CREATE MEAN & STD MEASURES PER CONDITION
dtbl <- dtbl %>%
group_by(subj_char,cond_char,speed_n,model_n,group_char,cluster_n,group_n) %>%
summarise_all(list("mean","sd"))
#%% CHANGE GROUP LABS
dtbl$speed_cond_num <- as.numeric(dtbl$speed_n); #as.numeric(dtbl$cond_char);
dtbl$subj_char <- as.factor(dtbl$subj_char); #mutate(dtbl,across(c('subj_char'), factor))
dtbl$group_char <- as.factor(dtbl$group_char); #<- mutate(dtbl,across(c('group_char'), factor))
dtbl$group_n <- as.factor(dtbl$group_n); #<- mutate(dtbl,across(c('group_n'), factor))
dtbl$model_n <- as.factor(dtbl$model_n); #<- mutate(dtbl,across(c('model_n'), factor))
#--
color_pal_subj = brewer.pal(9,'PuBuGn')
color_pal_subj = color_pal_subj[5:9];
#%% TBL VALUES
tbl_clusterS = unique(dtbl$cluster_n);
tbl_subjects = unique(dtbl$subj_char);
tbl_groups = unique(dtbl$group_char);
#%% MUTATE mn VARIABLES
fext = paste0("meansd_",fext);
dtbl$speed_cond_num <- as.numeric(dtbl$speed_n);
write.xlsx(dtbl,paste0("kinspdmed_",fext,"_tbl.xlsx"))
calc_cohensf2 <- function(mod_main,mod_alt){
r2_out = r.squaredGLMM(mod_main);
r2_outalt = r.squaredGLMM(mod_alt);
r2m = r2_out[1] # input your R2
f2m = r2m/(1 - r2m)
r2c = r2_out[2] # input your R2
f2c = r2c/(1 - r2c)
f2m = (r2_out[1]-r2_outalt[1])/(1-r2_out[1]);
f2c = (r2_out[2]-r2_outalt[2])/(1-r2_out[2]);
print(str_glue("r2m: {round(r2m,4)},\tr2c: {round(r2c,4)}\n\n"))
print(str_glue("f2m: {round(f2m,4)},\tf2c: {round(f2c,4)}\n\n"))
vals = data.frame(r2m, r2c, f2m, f2c);
return (vals)
}
#%% EXCEL DATAFRAME
excel_df <- data.frame(cluster_num=double(),
group_char=character(),
model_char=character(),
kinematic_char=character(),
freq_band_char=character(),
mod_num_obs=character(),
coeff_chars=character(),
coeffs=character(),
coeff_desm=character(),
coeff_m=character(),
coeff_b=character(),
confint_chars=character(),
emmeans=character(),
emmeans_se=character(),
confint_lwr=character(),
confint_upr=character(),
anv_chars=character(),
anv_pvals=character(),
anv_stats=character(),
anv_dfs=character(),
r2_m_int=double(),
r2_c_int=double(),
f2_m_int=double(),
f2_c_int=double(),
fsq_chars=character(),
fsq_vals=character(),
etasq_chars=character(),
etasq_vals=character(),
ran_effs_char=character(),
ran_effs_n=character())
theme_set(theme_classic()) # This sets the default ggplot theme
#%% LOOP VARS
cis <- rep(NA,length(clusters)*length(kin_measures)*length(eeg_measures))
kis <- rep(NA,length(clusters)*length(kin_measures)*length(eeg_measures))
eis <- rep(NA,length(clusters)*length(kin_measures)*length(eeg_measures))
cnt = 1;
for (i in 1:length(clusters)) {
for(j in 1:length(kin_measures)){
for(k in 1:length(eeg_measures)){
cis[cnt] = i;
kis[cnt] = j;
eis[cnt] = k;
cnt = cnt + 1;
}
}
}
for (i in 1:length(cis)){
#%% SET LOOP PARAMS
ci = clusters[cis[i]];
ki = kin_measures[kis[i]];
ei = eeg_measures[eis[i]];
#%% HTML TAG
cat(paste0("\n\n## ", ci,',', ki,',',ei,"\n"))
#%% SUBSET BY CLUSTER
tmpt <- filter_at(dtbl,vars('cluster_n'), any_vars(. %in% ci));
#%% REMOVE KIN_MEASURES < 0.005 & THAT ARE GREATER THAN OR LESS THAN 3STD FROM MEAN
#- remove NAN cases
tmpt = tmpt[complete.cases(tmpt[[ki]]),];
#%% COMPUTE LME MODEL
mod_char = paste(ei," ~ 1 + speed_cond_num + ",ki," + speed_cond_num:",ki," + (1|subj_char)");
mod <- lme4::lmer(str_glue(mod_char), data=tmpt);
#-- extract fixed & random effects coeffs
anv_vals <- car::Anova(mod,type=3)
fix_effs <- fixef(mod)
ran_effs <- ranef(mod)$subj_char
#%% EFFECT SIZES
cat(paste0("\n\n### model effect sizes\n"))
#-- Intercept Model for Cohen's f^2
print('intercept model\n');
mod_char_int = paste(ki," ~ 1 + (1|subj_char)");
tmp_mod = lme4::lmer(str_glue(mod_char_int), data=tmpt)
cf_alt = calc_cohensf2(mod, tmp_mod)
#-- calculate effect sizes using r-package
anv_vals_f <- car::Anova(mod,type=3,test.statistic = "F")
etasq_res <- effectsize::eta_squared(anv_vals_f, partial = TRUE)
cohens_fsq_res <- effectsize::cohens_f_squared(anv_vals_f, partial = TRUE)
# cohens_fsq_resg <- effectsize::cohens_f_squared(anv_vals_f, partial = FALSE)
#-- confidence intervals
summ <- summary(mod);
coeff_chars = row.names(summ$coefficients)
confintvs <- data.frame(emmeans::emmeans(mod,spec=c('speed_cond_num',ki),level=0.95))
emm = emmeans::emmeans(mod,spec=c('speed_cond_num',ki),level=0.95);
# bfc = emmeans::contrast(emm,adjutst="bonferroni")
# pwc = emmeans::contrast(emm,method = "pairwise")
print(kable(anv_vals));
# print(kable(data.frame(bfc)));
# print(kable(data.frame(pwc)));
print(kable(confintvs));
#-- design mat
desm = unique(mod@pp[[".->X"]]);
desm = format_csv(data.frame(desm));
#%% EXCEL PRINTS
new_row = data.frame(cluster_num=ci,
group_char=c('all'),
model_char=c('speed_eeg_kin_intact'),
kinematic_char=c(ki),
freq_band_char=c(ei),
mod_num_obs=nrow(tmpt),
coeff_chars=paste(unlist(coeff_chars),collapse=','),
coeffs=paste(unlist(mod@beta),collapse=','),
coeff_desm=desm,
confint_chars=paste(unlist(confintvs$group_char),collapse=','),
emmeans=paste(unlist(as.numeric(confintvs$emmean)),collapse=','),
emmeans_se=paste(unlist(as.numeric(confintvs$SE)),collapse=','),
confint_lwr=paste(unlist(as.numeric(confintvs$lower.CL)),collapse=','),
confint_upr=paste(unlist(as.numeric(confintvs$upper.CL)),collapse=','),
anv_chars=paste(unlist(row.names(anv_vals)),collapse=','),
anv_pvals=paste(unlist(anv_vals$`Pr(>Chisq)`),collapse=','),
anv_stats=paste(unlist(anv_vals$Chisq),collapse=','),
anv_dfs=paste(unlist(anv_vals$Df),collapse=','),
r2_m_int=cf_alt$r2m,
r2_c_int=cf_alt$r2c,
f2_m_int=cf_alt$f2m,
f2_c_int=cf_alt$f2c,
fsq_chars=paste(unlist(cohens_fsq_res$Parameter),collapse=','),
fsq_vals=paste(unlist(cohens_fsq_res$Cohens_f2_partial),collapse=','),
etasq_chars=paste(unlist(etasq_res$Parameter),collapse=','),
etasq_vals=paste(unlist(etasq_res$Eta2_partial),collapse=','),
ran_effs_char=paste(unlist(row.names(ran_effs)),collapse=','),
ran_effs_n=paste(unlist(ran_effs$`(Intercept)`),collapse=','))
excel_df <- rbind(excel_df,new_row)
#%% MODEL VALIDATION PLOTS
# cat(paste0("\n\n### model validations\n"))
# print(plot_model(mod, type = 'diag'))
# cat("\n")
#%% SCATTER3D IMPLEMENTATION
cat(paste0("\n\n### plot\n"))
xc = "speed_cond_num";
yc = ki;
intc = paste0(xc,":",yc)
#- plot
pch_n = 1;
conds = rev(unique(tmpt[[xc]]))
for(i in 1:length(conds)){
ts <- filter_at(tmpt,vars(xc),all_vars(. == conds[i]))
if(i == 1){
scatter <- scatterplot3d(ts[[yc]], ts[[xc]], ts[[ei]],
main = paste0(eeg_title_chars[eis[i]],"plot"),
xlab = kin_title_chars[kis[i]],
ylab = "Speed (m/s)",
zlab = eeg_title_chars[eis[i]],
xlim = c(min(tmpt[[yc]]),max(tmpt[[yc]])),
ylim = c(min(tmpt[[xc]]),max(tmpt[[xc]])),
zlim = c(min(tmpt[[ei]]),max(tmpt[[ei]])),
pch = pch_n,
color = color_pal_subj[i],
angle = 30) # adjust the viewing angle
} else {
scatter$points3d(ts[[yc]], ts[[xc]], ts[[ei]] ,
main = paste0(eeg_title_chars[eis[i]],"plot"),
col = color_pal_subj[i],
pch=pch_n)
}
}
a <- fix_effs[xc]
b <- fix_effs[yc]
c <- fix_effs[intc]
d <- fix_effs["(Intercept)"]
# Create the plane's z-values using the equation of the plane
plane_z <- function(y,x){a*x+b*y+c*x*y+d}
scatter$contour3d(plane_z,y.count=4,
x.count=4,
y.resolution=10,
x.resolution=10,
lty="24",
type="l")
#%% TABLE
tbl <- mod %>%
tbl_regression(tidy_fun = broom.mixed::tidy,
pvalue_fun = purrr::partial(style_pvalue, digits = 2),
intercept=TRUE) %>%
add_global_p() %>%
add_q()
#%% PRINT TABLE
t_out <- as_gt(tbl) %>%
gt::tab_header=c(paste0("CL",ci,") Changes in ",kin_title_chars[kis[i]],":",eeg_title_chars[eis[i]])) %>%
gt::tab_options(table.layout = "fixed") %>%
gt::as_raw_html()
print(t_out)
#%% TABLE
# #-- format custom vals
# chivals = signif(as.numeric(anv_vals$Chisq),2);
# rfvals = signif(as.numeric(cf_alt),2);
# f2val = signif(as.numeric(cohens_fsq_res$Cohens_f2_partial),2)
# #-- pariwise comps
# civalsmu1 = signif(as.numeric(confintvs[["speed_cond_num"]]))
# civalsmu2 = signif(as.numeric(confintvs[[ki]]))
# civalsem = signif(as.numeric(confintvs$emmean))
# civalsu = signif(as.numeric(confintvs$upper),2)
# civalsl = signif(as.numeric(confintvs$lower),2)
# civals = c(paste0("(",civalsl[1],",",civalsu[1],")"))
# #-- gtsummary table
# t_sum <- mod %>%
#   tbl_regression(tidy_fun=purrr::partial(broom.mixed::tidy,effects='fixed'),
#                  pvalue_fun=purrr::partial(signif, digits = 2),
#                  estimate_fun=purrr::partial(signif, digits = 2),
#                  intercept=TRUE,
#                  conf.level=0.95,
#                  add_reference_rows=TRUE,
#                  add_pairwise_contrasts=TRUE,
#                  add_header_rows=TRUE,
#                  interaction_sep=":",
#                  add_n=TRUE,
#                  keep_model=TRUE,
#                  label=list(speed_cond_num~"Speed"),
#                  term_labels=c(speed_cond_num="Speed")
#                  )  %>%
#   add_global_p() %>%
#   add_glance_source_note(include=c(nobs,REMLcrit,logLik,df.residual)) %>%
#   modify_header(label="**Variable**")
# #--
# t_gt <- t_sum %>%
#   as_gt() %>%
#   gt::cols_add(ChiSq=c(chivals[1],chivals[2],chivals[3],chivals[4]),
#                emm_Mu=c("",civalsmu1,civalsmu2,civalsem),
#                emm_CI=c("","","",civals[1])) %>%
#   gt::tab_header(title=md(paste0("CL",ci,") Changes in ",kin_title_chars[kis[i]],":",eeg_title_chars[eis[i]]))) %>%
#   tab_source_note(source_note=c(paste0("Rc=",rfvals[2]," f2c=",rfvals[4]," f2s=",f2val[1]," f2k=",f2val[2]," f2s:k=",f2val[3]))) %>%
#   gt::tab_options(table.layout = "auto",
#                   heading.title.font.weight="bold",
#                   heading.subtitle.font.weight ="bold",
#                   column_labels.font.weight = "bold")
# #%% PRINT TABLE
# t_ht <- t_gt |>
#   gt::as_raw_html()
# print(t_ht)
#--
# gt::gtsave(t_gt,filename=file.path(save_dir,sprintf("cl%i_%s_%s_sgi.docx",ci,ei,ki)))
}
t_out <- as_gt(tbl) %>%
gt::tab_header(title=sprintf("CL%i) %s & %s",ci,kin_title_chars[kis[i]],eeg_title_chars[eis[i]])) %>%
gt::tab_options(table.layout = "fixed") %>%
gt::as_raw_html()
print(t_out)
theme_set(theme_classic()) # This sets the default ggplot theme
#%% LOOP VARS
cis <- rep(NA,length(clusters)*length(kin_measures)*length(eeg_measures)*length(tbl_groups))
kis <- rep(NA,length(clusters)*length(kin_measures)*length(eeg_measures)*length(tbl_groups))
eis <- rep(NA,length(clusters)*length(kin_measures)*length(eeg_measures)*length(tbl_groups))
gis <- rep(NA,length(clusters)*length(kin_measures)*length(eeg_measures)*length(tbl_groups))
cnt = 1;
for (i in 1:length(clusters)) {
for(j in 1:length(kin_measures)){
for(k in 1:length(eeg_measures)){
for(g in 1:length(tbl_groups)){
cis[cnt] = i;
kis[cnt] = j;
eis[cnt] = k;
gis[cnt] = g;
cnt = cnt + 1;
}
}
}
}
for (i in 1:length(cis)){
#%% SET LOOP PARAMS
ci = clusters[cis[i]];
ki = kin_measures[kis[i]];
ei = eeg_measures[eis[i]];
gi = tbl_groups[gis[i]];
#%% HTML TAG
cat(paste0("\n\n## ",gi,',', ci,',', ki,',',ei,"\n"))
#%% SUBSET BY CLUSTER
tmpt <- filter_at(dtbl,vars('cluster_n'), any_vars(. %in% ci));
tmpt <- filter_at(tmpt,vars('group_char'), any_vars(. %in% gi));
#%% REMOVE KIN_MEASURES < 0.005 & THAT ARE GREATER THAN OR LESS THAN 3STD FROM MEAN
#- remove NAN cases
tmpt = tmpt[complete.cases(tmpt[[ki]]),];
#%% COMPUTE LME MODEL
mod_char = paste(ei," ~ 1 + speed_cond_num + ",ki," + speed_cond_num:",ki," + (1|subj_char)");
mod <- lme4::lmer(str_glue(mod_char), data=tmpt);
#-- extract fixed & random effects coeffs
anv_vals <- car::Anova(mod,type=3)
fix_effs <- fixef(mod)
ran_effs <- ranef(mod)$subj_char
#%% R-SQUARED VALUE
# r.squaredGLMM() %>%
#   print(str_glue("{outcome}\n R2m: {round(mod[1],4)},\tR2c: {round(mod[2],4)}\n\n"))
#%% EFFECT SIZES
cat(paste0("\n\n### model effect sizes\n"))
#-- Intercept Model for Cohen's f^2
print('intercept model\n');
mod_char_int = paste(ki," ~ 1 + (1|subj_char)");
tmp_mod = lme4::lmer(str_glue(mod_char_int), data=tmpt)
cf_alt = calc_cohensf2(mod, tmp_mod)
#-- calculate effect sizes using r-package
anv_vals_f <- car::Anova(mod,type=3,test.statistic = "F")
etasq_res <- effectsize::eta_squared(anv_vals_f, partial = TRUE)
cohens_fsq_res <- effectsize::cohens_f_squared(anv_vals_f, partial = TRUE)
# cohens_fsq_resg <- effectsize::cohens_f_squared(anv_vals_f, partial = FALSE)
#-- confidence intervals
summ <- summary(mod);
coeff_chars = row.names(summ$coefficients)
confintvs <- data.frame(emmeans::emmeans(mod,spec=c('speed_cond_num',ki),level=0.95))
emm = emmeans::emmeans(mod,spec=c('speed_cond_num',ki),level=0.95);
# bfc = emmeans::contrast(emm,adjutst="bonferroni")
# pwc = emmeans::contrast(emm,method = "pairwise")
print(kable(anv_vals));
# print(kable(data.frame(bfc)));
# print(kable(data.frame(pwc)));
print(kable(confintvs));
#-- design mat
desm = unique(mod@pp[[".->X"]]);
desm = format_csv(data.frame(desm));
#%% EXCEL PRINTS
new_row = data.frame(cluster_num=ci,
group_char=gi,
model_char=c('speed_eeg_kin_intact'),
kinematic_char=c(ki),
freq_band_char=c(ei),
mod_num_obs=nrow(tmpt),
coeff_chars=paste(unlist(coeff_chars),collapse=','),
coeffs=paste(unlist(mod@beta),collapse=','),
coeff_desm=desm,
confint_chars=paste(unlist(confintvs$group_char),collapse=','),
emmeans=paste(unlist(as.numeric(confintvs$emmean)),collapse=','),
emmeans_se=paste(unlist(as.numeric(confintvs$SE)),collapse=','),
confint_lwr=paste(unlist(as.numeric(confintvs$lower.CL)),collapse=','),
confint_upr=paste(unlist(as.numeric(confintvs$upper.CL)),collapse=','),
anv_chars=paste(unlist(row.names(anv_vals)),collapse=','),
anv_pvals=paste(unlist(anv_vals$`Pr(>Chisq)`),collapse=','),
anv_stats=paste(unlist(anv_vals$Chisq),collapse=','),
anv_dfs=paste(unlist(anv_vals$Df),collapse=','),
r2_m_int=cf_alt$r2m,
r2_c_int=cf_alt$r2c,
f2_m_int=cf_alt$f2m,
f2_c_int=cf_alt$f2c,
fsq_chars=paste(unlist(cohens_fsq_res$Parameter),collapse=','),
fsq_vals=paste(unlist(cohens_fsq_res$Cohens_f2_partial),collapse=','),
etasq_chars=paste(unlist(etasq_res$Parameter),collapse=','),
etasq_vals=paste(unlist(etasq_res$Eta2_partial),collapse=','),
ran_effs_char=paste(unlist(row.names(ran_effs)),collapse=','),
ran_effs_n=paste(unlist(ran_effs$`(Intercept)`),collapse=','))
excel_df <- rbind(excel_df,new_row)
#%% MODEL VALIDATION PLOTS
# cat(paste0("\n\n### model validations\n"))
# print(plot_model(mod, type = 'diag'))
# cat("\n")
#%% SCATTER3D IMPLEMENTATION
cat(paste0("\n\n### plot\n"))
xc = "speed_cond_num";
yc = ki;
intc = paste0(xc,":",yc)
#- plot
pch_n = 1;
conds = rev(unique(tmpt[[xc]]))
for(i in 1:length(conds)){
ts <- filter_at(tmpt,vars(xc),all_vars(. == conds[i]))
if(i == 1){
scatter <- scatterplot3d(ts[[yc]], ts[[xc]], ts[[ei]],
main = paste0(eeg_title_chars[eis[i]],"plot"),
xlab = kin_title_chars[kis[i]],
ylab = "Speed (m/s)",
zlab = eeg_title_chars[eis[i]],
xlim = c(min(tmpt[[yc]]),max(tmpt[[yc]])),
ylim = c(min(tmpt[[xc]]),max(tmpt[[xc]])),
zlim = c(min(tmpt[[ei]]),max(tmpt[[ei]])),
pch = pch_n,
color = color_pal_subj[i],
angle = 30) # adjust the viewing angle
} else {
scatter$points3d(ts[[yc]], ts[[xc]], ts[[ei]] ,
main = paste0(eeg_title_chars[eis[i]],"plot"),
col = color_pal_subj[i],
pch=pch_n)
}
}
a <- fix_effs[xc]
b <- fix_effs[yc]
c <- fix_effs[intc]
d <- fix_effs["(Intercept)"]
# Create the plane's z-values using the equation of the plane
plane_z <- function(y,x){a*x+b*y+c*x*y+d}
scatter$contour3d(plane_z,y.count=4,
x.count=4,
y.resolution=10,
x.resolution=10,
lty="24",
type="l")
#%% TABLE
tbl <- mod %>%
tbl_regression(tidy_fun = broom.mixed::tidy,
pvalue_fun = purrr::partial(style_pvalue, digits = 2),
intercept=TRUE) %>%
add_global_p() %>%
add_q()
#%% PRINT TABLE
t_out <- as_gt(tbl) %>%
gt::tab_header(title=sprintf("CL%i, %s) %s & %s",ci,gi,kin_title_chars[kis[i]],eeg_title_chars[eis[i]])) %>%
gt::tab_options(table.layout = "fixed") %>%
gt::as_raw_html()
print(t_out)
#%% TABLE
# #-- format custom vals
# chivals = signif(as.numeric(anv_vals$Chisq),2);
# rfvals = signif(as.numeric(cf_alt),2);
# f2val = signif(as.numeric(cohens_fsq_res$Cohens_f2_partial),2)
# #-- pariwise comps
# civalsmu1 = signif(as.numeric(confintvs[["speed_cond_num"]]))
# civalsmu2 = signif(as.numeric(confintvs[[ki]]))
# civalsem = signif(as.numeric(confintvs$emmean))
# civalsu = signif(as.numeric(confintvs$upper),2)
# civalsl = signif(as.numeric(confintvs$lower),2)
# civals = c(paste0("(",civalsl[1],",",civalsu[1],")"))
# #-- gtsummary table
# t_sum <- mod %>%
#   tbl_regression(tidy_fun=purrr::partial(broom.mixed::tidy,effects='fixed'),
#                  pvalue_fun=purrr::partial(signif, digits = 2),
#                  estimate_fun=purrr::partial(signif, digits = 2),
#                  intercept=TRUE,
#                  conf.level=0.95,
#                  add_reference_rows=TRUE,
#                  add_pairwise_contrasts=TRUE,
#                  add_header_rows=TRUE,
#                  interaction_sep=":",
#                  add_n=TRUE,
#                  keep_model=TRUE,
#                  label=list(speed_cond_num~"Speed"),
#                  term_labels=c(speed_cond_num="Speed")
#                  )  %>%
#   add_global_p() %>%
#   add_glance_source_note(include=c(nobs,REMLcrit,logLik,df.residual)) %>%
#   modify_header(label="**Variable**")
# #--
# t_gt <- t_sum %>%
#   as_gt() %>%
#   gt::cols_add(ChiSq=c(chivals[1],chivals[2],chivals[3],chivals[4]),
#                emm_Mu=c("",civalsmu1,civalsmu2,civalsem),
#                emm_CI=c("","","",civals[1])) %>%
#   gt::tab_header(title=md(paste0("CL",ci,") Changes in ",kin_title_chars[kis[i]],":",eeg_title_chars[eis[i]]))) %>%
#   tab_source_note(source_note=c(paste0("Rc=",rfvals[2]," f2c=",rfvals[4]," f2s=",f2val[1]," f2k=",f2val[2]," f2s:k=",f2val[3]))) %>%
#   gt::tab_options(table.layout = "auto",
#                   heading.title.font.weight="bold",
#                   heading.subtitle.font.weight ="bold",
#                   column_labels.font.weight = "bold")
#%% PRINT TABLE
# t_ht <- t_gt |>
#   gt::as_raw_html()
# print(t_ht)
#--
# gt::gtsave(t_gt,filename=file.path(save_dir,sprintf("cl%i_%s_%s_%s_sgi.docx",ci,gi,ei,ki)))
}
write.xlsx(excel_df,file.path(curr_dir,sprintf("kinspdmed_%s_stats.xlsx",fext))) #paste0("kinspdmed_",fext,"_stats.xlsx"))
curr_dir
source("M:/jsalminen/GitHub/MIND_IN_MOTION_PRJ/MindInMotion_YoungerOlderAdult_KinEEGCorrs/src/r_scripts/sbs_lme_mods/tf_flasso_mapply_datax.R", echo=TRUE)
