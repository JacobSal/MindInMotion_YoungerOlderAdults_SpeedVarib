eii
eii = 1
ei <- eeg_measures[eii];
#%% GET DATA
#--
dat_out <- get_chord_data(dtbl,orig_stats,mi,ei,clusters)
#--
anv_stats = dat_out$anv_stats
anv_pvs = dat_out$anv_pvs
anv_effsz = dat_out$anv_effsz
lme_pvs = dat_out$lme_pvs
lme_ests =  dat_out$lme_ests
lme_coefs = dat_out$lme_coefs
lme_calcs = dat_out$lme_calcs
lme_bools = dat_out$lme_bools
orig_dats = dat_out$orig_dats
orig_conds = dat_out$orig_conds
anv_issig = dat_out$anv_issig
lme_issig = dat_out$lme_issig
#--
pwc_issig = dat_out$pwc_issig
pwc_ests = dat_out$pwc_ests
#--
ttn0_pvs = dat_out$ttn0_pvs
ttna0_pvs = dat_out$ttna0_pvs
ttn0_ests = dat_out$ttn0_ests
ttna0_ests = dat_out$ttna0_ests
ttn0_issig = dat_out$ttn0_issig
ttna0_issig = dat_out$ttna0_issig
#-- sums
unmi = c(7,2,6,3,5,4,1)
td = ttna0_ests[,,1]*as.vector(ttna0_issig)*RDAT_MULT
# td = ttn0_ests[,,1]*as.vector(ttn0_issig[,,1])*RDAT_MULT
# td = ttn0_ests[,,2]*as.vector(ttn0_issig[,,2])*RDAT_MULT
# td = ttn0_ests[,,3]*as.vector(ttn0_issig[,,3])*RDAT_MULT
cat(sprintf('BASE: %s, conn: %s, model: %s, measure: %s',STAT_OUT_FEXT,CONN_CHAR,mi,ei))
cat(cluster_chars)
sumout = apply(array(c(apply(td,c(2),sum),apply(td,c(1),sum)),dim=c(length(cluster_chars),2)),c(1),sum)
cat(sprintf('%s: %f\n',cluster_chars[unmi],sumout[unmi]))
cat(sprintf('%f\n',sumout[unmi]))
# cat(sprintf('ed_sum1 int: %f\n',apply(td,c(1),sum)))
# cat(sprintf('ed_sum2 int: %f\n',apply(td,c(2),sum)))
eii = 2
ei <- eeg_measures[eii];
#%% GET DATA
#--
dat_out <- get_chord_data(dtbl,orig_stats,mi,ei,clusters)
#--
anv_stats = dat_out$anv_stats
anv_pvs = dat_out$anv_pvs
anv_effsz = dat_out$anv_effsz
lme_pvs = dat_out$lme_pvs
lme_ests =  dat_out$lme_ests
lme_coefs = dat_out$lme_coefs
lme_calcs = dat_out$lme_calcs
lme_bools = dat_out$lme_bools
orig_dats = dat_out$orig_dats
orig_conds = dat_out$orig_conds
anv_issig = dat_out$anv_issig
lme_issig = dat_out$lme_issig
#--
pwc_issig = dat_out$pwc_issig
pwc_ests = dat_out$pwc_ests
#--
ttn0_pvs = dat_out$ttn0_pvs
ttna0_pvs = dat_out$ttna0_pvs
ttn0_ests = dat_out$ttn0_ests
ttna0_ests = dat_out$ttna0_ests
ttn0_issig = dat_out$ttn0_issig
ttna0_issig = dat_out$ttna0_issig
#-- sums
unmi = c(7,2,6,3,5,4,1)
td = ttna0_ests[,,1]*as.vector(ttna0_issig)*RDAT_MULT
# td = ttn0_ests[,,1]*as.vector(ttn0_issig[,,1])*RDAT_MULT
# td = ttn0_ests[,,2]*as.vector(ttn0_issig[,,2])*RDAT_MULT
# td = ttn0_ests[,,3]*as.vector(ttn0_issig[,,3])*RDAT_MULT
cat(sprintf('BASE: %s, conn: %s, model: %s, measure: %s',STAT_OUT_FEXT,CONN_CHAR,mi,ei))
cat(cluster_chars)
sumout = apply(array(c(apply(td,c(2),sum),apply(td,c(1),sum)),dim=c(length(cluster_chars),2)),c(1),sum)
cat(sprintf('%s: %f\n',cluster_chars[unmi],sumout[unmi]))
cat(sprintf('%f\n',sumout[unmi]))
# cat(sprintf('ed_sum1 int: %f\n',apply(td,c(1),sum)))
# cat(sprintf('ed_sum2 int: %f\n',apply(td,c(2),sum)))
RDAT_MULT
eii = 3
ei <- eeg_measures[eii];
#%% GET DATA
#--
dat_out <- get_chord_data(dtbl,orig_stats,mi,ei,clusters)
#--
anv_stats = dat_out$anv_stats
anv_pvs = dat_out$anv_pvs
anv_effsz = dat_out$anv_effsz
lme_pvs = dat_out$lme_pvs
lme_ests =  dat_out$lme_ests
lme_coefs = dat_out$lme_coefs
lme_calcs = dat_out$lme_calcs
lme_bools = dat_out$lme_bools
orig_dats = dat_out$orig_dats
orig_conds = dat_out$orig_conds
anv_issig = dat_out$anv_issig
lme_issig = dat_out$lme_issig
#--
pwc_issig = dat_out$pwc_issig
pwc_ests = dat_out$pwc_ests
#--
ttn0_pvs = dat_out$ttn0_pvs
ttna0_pvs = dat_out$ttna0_pvs
ttn0_ests = dat_out$ttn0_ests
ttna0_ests = dat_out$ttna0_ests
ttn0_issig = dat_out$ttn0_issig
ttna0_issig = dat_out$ttna0_issig
#-- sums
unmi = c(7,2,6,3,5,4,1)
td = ttna0_ests[,,1]*as.vector(ttna0_issig)*RDAT_MULT
# td = ttn0_ests[,,1]*as.vector(ttn0_issig[,,1])*RDAT_MULT
# td = ttn0_ests[,,2]*as.vector(ttn0_issig[,,2])*RDAT_MULT
# td = ttn0_ests[,,3]*as.vector(ttn0_issig[,,3])*RDAT_MULT
cat(sprintf('BASE: %s, conn: %s, model: %s, measure: %s',STAT_OUT_FEXT,CONN_CHAR,mi,ei))
cat(cluster_chars)
sumout = apply(array(c(apply(td,c(2),sum),apply(td,c(1),sum)),dim=c(length(cluster_chars),2)),c(1),sum)
cat(sprintf('%s: %f\n',cluster_chars[unmi],sumout[unmi]))
cat(sprintf('%f\n',sumout[unmi]))
# cat(sprintf('ed_sum1 int: %f\n',apply(td,c(1),sum)))
# cat(sprintf('ed_sum2 int: %f\n',apply(td,c(2),sum)))
unmi = c(7,2,6,3,5,4,1)
# td = ttna0_ests[,,1]*as.vector(ttna0_issig)*RDAT_MULT
td = ttn0_ests[,,1]*as.vector(ttn0_issig[,,1])*RDAT_MULT
# td = ttn0_ests[,,2]*as.vector(ttn0_issig[,,2])*RDAT_MULT
# td = ttn0_ests[,,3]*as.vector(ttn0_issig[,,3])*RDAT_MULT
cat(sprintf('BASE: %s, conn: %s, model: %s, measure: %s',STAT_OUT_FEXT,CONN_CHAR,mi,ei))
cat(cluster_chars)
sumout = apply(array(c(apply(td,c(2),sum),apply(td,c(1),sum)),dim=c(length(cluster_chars),2)),c(1),sum)
cat(sprintf('%s: %f\n',cluster_chars[unmi],sumout[unmi]))
cat(sprintf('%f\n',sumout[unmi]))
# cat(sprintf('ed_sum1 int: %f\n',apply(td,c(1),sum)))
# cat(sprintf('ed_sum2 int: %f\n',apply(td,c(2),sum)))
unmi = c(7,2,6,3,5,4,1)
# td = ttna0_ests[,,1]*as.vector(ttna0_issig)*RDAT_MULT
# td = ttn0_ests[,,1]*as.vector(ttn0_issig[,,1])*RDAT_MULT
td = ttn0_ests[,,2]*as.vector(ttn0_issig[,,2])*RDAT_MULT
# td = ttn0_ests[,,3]*as.vector(ttn0_issig[,,3])*RDAT_MULT
cat(sprintf('BASE: %s, conn: %s, model: %s, measure: %s',STAT_OUT_FEXT,CONN_CHAR,mi,ei))
cat(cluster_chars)
sumout = apply(array(c(apply(td,c(2),sum),apply(td,c(1),sum)),dim=c(length(cluster_chars),2)),c(1),sum)
cat(sprintf('%s: %f\n',cluster_chars[unmi],sumout[unmi]))
cat(sprintf('%f\n',sumout[unmi]))
# cat(sprintf('ed_sum1 int: %f\n',apply(td,c(1),sum)))
# cat(sprintf('ed_sum2 int: %f\n',apply(td,c(2),sum)))
unmi = c(7,2,6,3,5,4,1)
# td = ttna0_ests[,,1]*as.vector(ttna0_issig)*RDAT_MULT
# td = ttn0_ests[,,1]*as.vector(ttn0_issig[,,1])*RDAT_MULT
# td = ttn0_ests[,,2]*as.vector(ttn0_issig[,,2])*RDAT_MULT
td = ttn0_ests[,,3]*as.vector(ttn0_issig[,,3])*RDAT_MULT
cat(sprintf('BASE: %s, conn: %s, model: %s, measure: %s',STAT_OUT_FEXT,CONN_CHAR,mi,ei))
cat(cluster_chars)
sumout = apply(array(c(apply(td,c(2),sum),apply(td,c(1),sum)),dim=c(length(cluster_chars),2)),c(1),sum)
cat(sprintf('%s: %f\n',cluster_chars[unmi],sumout[unmi]))
cat(sprintf('%f\n',sumout[unmi]))
# cat(sprintf('ed_sum1 int: %f\n',apply(td,c(1),sum)))
# cat(sprintf('ed_sum2 int: %f\n',apply(td,c(2),sum)))
View(orig_stats)
#%% HTML TAG
cat(paste0("\n\n## ",ei,',',cluster_chars[cis[i]],'->',cluster_chars[cjs[i]],"\n"))
cat(paste0("\n\n# Interaction Models\n"))
# SPEED INTERACITON
theme_set(theme_classic()) # This sets the default ggplot theme
#%% LOOP VARS
tmp <- length(clusters)*length(clusters)-length(clusters)
cis <- rep(NA,tmp*length(eeg_measures))
eis <- rep(NA,tmp*length(eeg_measures))
cjs <- rep(NA,tmp*length(eeg_measures))
cnt = 1;
for (i in 1:length(clusters)) {
for (j in 1:length(clusters)) {
for(k in 1:length(eeg_measures)){
if (i!=j) {
cis[cnt] = i;
cjs[cnt] = j;
eis[cnt] = k;
cnt = cnt + 1;
}
}
}
}
i = 1
ci = clusters[cis[i]];
cj = clusters[cjs[i]];
ei = eeg_measures[eis[i]];
#%% HTML TAG
cat(paste0("\n\n## ",ei,',',cluster_chars[cis[i]],'->',cluster_chars[cjs[i]],"\n"))
#%% SUBSET BY CLUSTER
tmpt <- filter_at(dtbl,vars('cluster_n_fr'), any_vars(. %in% ci));
tmpt <- filter_at(tmpt,vars('cluster_n_to'), any_vars(. %in% cj));
# -- remove NAN cases
tmpt = tmpt[complete.cases(tmpt[[ei]]),];
#%% COMPUTE LME MODEL
mod_char = paste(ei," ~ 1 + speed_n + group_char + speed_n:group_char + (1|subj_char)");
# mod <- lme4::lmer(str_glue(mod_char), data=tmpt);
mod <- lmerTest::lmer(str_glue(mod_char), data=tmpt);
sm = summary(mod)
#%% PRINT TABLE
# tbl <- mod %>%
#   tbl_regression(tidy_fun = broom.mixed::tidy,
#                  pvalue_fun = purrr::partial(style_pvalue, digits = 2),
#                  intercept=TRUE) %>%
#   add_global_p() %>%
#   add_q()
#
# t_out <- as_gt(tbl) %>%
#   gt::tab_header(title=c(ei,") for Connection ",ci,"-",cj)) %>%
#   gt::tab_options(table.layout = "fixed") %>%
#   gt::as_raw_html()
# print(t_out)
# #-- extract fixed & random effects coeffs
anv_vals <- car::Anova(mod,type=3)
fix_effs <- fixef(mod)
ran_effs <- ranef(mod)$subj_char
#%% EFFECT SIZES
cat(paste0("\n\n### model effect sizes\n"))
#-- Intercept Model for Cohen's f^2
print('intercept model\n');
mod_char_int = paste(ei," ~ 1 + (1|subj_char)");
mod <- lmerTest::lmer(str_glue(mod_char), data=tmpt);
sfit <- summary(mod)
lme_est <- as.numeric(sfit$coefficients[, "Estimate"])
lme_pval <- as.numeric(sfit$coefficients[, "Pr(>|t|)"])
lme_stat <- as.numeric(sfit$coefficients[,"t value"])
lme_cc <- rownames(sfit$coefficients[,])
#-- extract fixed & random effects coeffs
# anv_vals <- car::Anova(mod,type=3)
# anv_chars=paste0(unlist(row.names(anv_vals)),collapse=',')
# anv_pvals=paste0(unlist(anv_vals$`Pr(>Chisq)`),collapse=',')
# anv_stats=paste0(unlist(anv_vals$Chisq),collapse=',')
# anv_dfs=paste0(unlist(anv_vals$Df),collapse=',')
#--
anv_vals <- anova(mod)
anv_chars=paste0(unlist(row.names(anv_vals)),collapse=',')
anv_pvals=paste0(unlist(anv_vals$`Pr(>F)`),collapse=',')
anv_stats=paste0(unlist(anv_vals$`F value`),collapse=',')
anv_dfs=paste0(unlist(anv_vals$DenDF),collapse=',')
fix_effs <- fixef(mod)
ran_effs <- ranef(mod)$subj_char
#%% EFFECT SIZES
cat(paste0("\n\n### model effect sizes\n"))
#-- Intercept Model for Cohen's f^2
print('intercept model\n');
mod_char_int = paste0(ei," ~ 1 + (1|subj_char)");
tmp_mod = lme4::lmer(str_glue(mod_char_int), data=tmpt)
cf_alt = calc_cohensf2(mod, tmp_mod)
summ <- summary(mod);
coeff_chars = row.names(summ$coefficients)
emm = emmeans::emmeans(mod,spec=c('speed_n','group_char'),level=0.95);
bfc = emmeans::contrast(emm,adjutst="bonferroni")
pwc = emmeans::contrast(emm,method="pairwise")
ttz = data.frame(emmeans::test(emm,null=0))
#--
emma = emmeans::emmeans(mod,spec=c('speed_n'),level=0.95);
ttza = data.frame(emmeans::test(emma,null=0))
#-- design mat
desm = unique(mod@pp[[".->X"]]);
desm = format_csv(data.frame(desm));
#--
cfis <- data.frame(emm)
pwcs = data.frame(pwc)
#--
emms = emtrends(mod, pairwise ~ group_char, var = "speed_n")
emm_slp = data.frame(emms$emtrends)
emm_slpcon = data.frame(emms$contrasts)
emm_slptt = test(emtrends(mod, specs = ~ group_char, var = "speed_n"), side = "two_sided")
emm_slpcontt = data.frame(emm_slptt)
# print(kable(cfis));
# print(kable(anv_vals));
# print(kable(data.frame(bfc)));
# print(kable(data.frame(pwc)));
emm_slp
emm_slpcontt[,'speed_n.trend']
emm_slpcon
source("M:/jsalminen/GitHub/MIND_IN_MOTION_PRJ/MindInMotion_YoungerOlderAdults_Connectivity/src/r_scripts/cnctanl_lmes/lme_conn_slide_chordplot_fin_anl.R", echo=TRUE)
debugSource("M:/jsalminen/GitHub/MIND_IN_MOTION_PRJ/MindInMotion_YoungerOlderAdults_Connectivity/src/r_scripts/cnctanl_lmes/conn_funcs_fin_anl.R", echo=TRUE)
source("M:/jsalminen/GitHub/MIND_IN_MOTION_PRJ/MindInMotion_YoungerOlderAdults_Connectivity/src/r_scripts/cnctanl_lmes/lme_conn_slide_chordplot_fin_anl.R", echo=TRUE)
source("M:/jsalminen/GitHub/MIND_IN_MOTION_PRJ/MindInMotion_YoungerOlderAdults_Connectivity/src/r_scripts/cnctanl_lmes/lme_conn_slide_chordplot_fin_anl.R", echo=TRUE)
mii
ei
mi = mods_plot[mii];
fextmi = mods_plot_fx[mii]
#--
darken <- function(col, factor = 0.7) {
rgb_val <- col2rgb(col) / 255
rgb(t(rgb_val * factor))
}
termis <- c(1,2,3,4)
if(mi=="speed_group_intact_all"){
termis <- c(1,2,3,4,5,6,7,11,12,13)
# termis <- c(5,6,7,8,9,10)
}
if(mi=="speed_group_all"){
termis <- c(1,2,3,4,5,6,7,11,12,13)
# termis <- c(5,6,7,8,9,10)
}
if(mi=="rest_group_all"){
termis <- c(1,2,3,4,5,6,7,8)
# termis <- c(3,4,5)
}
ei <- eeg_measures[eii];
#%% GET DATA
#--
dat_out <- get_chord_data(dtbl,orig_stats,mi,ei,clusters)
ei <- eeg_measures[eii];
debugSource("M:/jsalminen/GitHub/MIND_IN_MOTION_PRJ/MindInMotion_YoungerOlderAdults_Connectivity/src/r_scripts/cnctanl_lmes/conn_funcs_fin_anl.R", echo=TRUE)
#--
dat_out <- get_chord_data(dtbl,orig_stats,mi,ei,clusters)
#-- slp emmean
slpem_cc <-  scan(text = tmpt[,'emm_slptt_cc'], sep = ',', quiet = TRUE)
#-- slp emmean
slpem_cc <-  strsplit(tmpt[,'emm_slptt_cc'],',')
tmpt$emm_slptt_cctmpt[,'emm_slptt_cc']
tmpt[,'emm_slptt_cc']
#-- slp emmean
slpem_cc <-  strsplit(tmpt[,'emm_slptt_cc'],',')
#-- slp emmean
slpem_cc <-  strsplit(as.character(tmpt[,'emm_slptt_cc']),',')
slpem_cc
#-- slp emmean
slpem_cc <-  strsplit(as.character(tmpt[,'emm_slpcon_cc']),',')
slpem_cc
slpem_est <-  scan(text = tmpt[,'emm_slpcon_est'], sep = ',', quiet = TRUE)
tmpt[,'emm_slpcon_est']
tmpt[[,'emm_slpcon_est']]
slpem_est <-  scan(text = as.character(tmpt[,'emm_slpcon_est']), sep = ',', quiet = TRUE)
slpem_est
ttna0_est
pwc_cc
pwc_est
slpem_pval <-  scan(text = as.character(tmpt[,'emm_slpcon_pval']), sep = ',', quiet = TRUE)
slpem_pval
slpem_est
# ERROR. png() device not found bug try: dev.off()
# ERROR. png() device not found fixed by changing cell names to a simple "windows friendlY" format so that knitr could save files.
knitr::opts_chunk$set(echo = TRUE)
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clear console
cat("\014")
# Clean workspace
rm(list=ls())
# install.packages(c("tidyverse","purrr","R.matlab","readxl","dplyr"))
#%% PACKAGES FOR STATS
library(readxl);
library(purrr);
library(tidyverse);
library(tibble);
library(knitr);
library(gtsummary);
library(kableExtra);
library(lme4);
library(MuMIn);
library(car);
library(effectsize)
library(sjPlot);
library(emmeans);
#%% PACKAGES FOR PLOTS & HTML HANDLING
# library(effects);
# library(sjPlot);
# library(plotly);
# library(webshot)
# library(reshape2);
# library(htmltools)
# library(Polychrome);
# library(htmlwidgets);
# library(shiny)
# library(webshot)
library(circlize)
library(purrr)
library(scatterplot3d)
library(RColorBrewer)
library(openxlsx)
library(kableExtra) # devtools::install_github("haozhu233/kableExtra")
library(R.matlab)
library(devEMF)  # for EMF output
## GTSUMMARY THEME
#%% ANOVA OPTIONS
options(contrasts = c("contr.sum","contr.poly")) # suggested for type III
#%% FIGURE & TABLE OPTIONS
gtsummary::set_gtsummary_theme(theme_gtsummary_journal("jama"))
#--
ispc <- function() {
sys_name <- Sys.info()["sysname"]
if (sys_name == "Windows") {
return(TRUE)
} else {
return(FALSE)
}
}
#%% SET FUNCTIONS
curr_dir = "/jsalminen/GitHub/MIND_IN_MOTION_PRJ/MindInMotion_YoungerOlderAdults_Connectivity/src/r_scripts/cnctanl_lmes";
if(ispc()){
curr_dir <- paste0("M:",curr_dir)
}else{
curr_dir <- paste0("/blue/dferris",curr_dir);
}
# curr_dir = getwd();
# setwd(curr_dir)
source(file.path(curr_dir,"conn_funcs_fin_anl.R"));
print(curr_dir);
#%% CLUSTERS & MEASURES TO PLOT
clusters <- c(11,8,6,9,7,4,3)
cluster_chars <- c('MCing','LPPO','LSM','LSupM','RPreM','RSM','RPPO')
#--
eeg_measures = c('mean_theta_ft','mean_alpha_ft','mean_beta_ft','mean_gamm_ft');
eeg_title_chars = c('mean_theta_ft','mean_alpha_ft','mean_beta_ft','mean_gamm_ft');
mods_plot = c('speed_group_intact_all','speed_group_all','rest_group_all');
mods_plot_fx = c('spgi','spg','rg');
STAT_OUT_FEXT = "nb"
#--
# eeg_measures = c('mean_theta_ft','mean_alpha_ft','mean_beta_ft','mean_gamm_ft');
# eeg_title_chars = c('mean_theta_ft','mean_alpha_ft','mean_beta_ft','mean_gamm_ft');
# mods_plot = c('rest_group_all');
# mods_plot_fx = c('rg');
# STAT_OUT_FEXT = "nb"
#--
# eeg_measures = c('mean_theta_ftrrb','mean_alpha_ftrrb','mean_beta_ftrrb','mean_gamm_ftrrb');
# eeg_title_chars = c('mean_theta_ftrrb','mean_alpha_ftrrb','mean_beta_ftrrb','mean_gamm_ftrrb');
# mods_plot = c('speed_group_intact_all','speed_group_all');
# mods_plot_fx = c('spgib','spgb');
# STAT_OUT_FEXT = "b"
#--
# eeg_measures = c('mean_beta_ftrrb');
# eeg_title_chars = c('mean_beta_ftrrb');
# mods_plot = c('speed_group_intact_all','speed_group_all');
# mods_plot_fx = c('spgib','spgb');
# STAT_OUT_FEXT = "b"
#%% LOADING PARAMETERS
FEXT_BASE = 'sct_brest';
#--
# CONN_CHAR = 'Coh';
# CONN_CHAR = 'dDTF08';
# CONN_CHAR = 'S';
CONN_CHARS = c('dDTF08','Coh')
# CONN_CHARS = c('dDTF08','Coh')
# CONN_CHARS = c('S')
#--
# FEXT_CONN = 'dcs_m10_w65_cl346810_all';
# FEXT_CONN = 'dcs_m40_w62_cl34678911_128hz';
# FEXT_CONN = 'dcs_m10_w62_cl34678911_500hz';
FEXT_CONN = 'dcs_m20_w62_cl34678911_500hz';
# FEXT_CONN = 'dcs_m32_w62_cl34678911_128hz';
#%% PLOTTING PARAMETERS
N_CLUSTS = length(clusters);
EX <- 10
MAJT_N <- 5
CEX_MULT <- 0.55;
LWD_MULT <- 0.35;
TLEN_MULT <- 0.25;
TRACK_MULT <- 1.2;
ARR_MULT <- 0.6;
ALPHA <- 0.05;
#--
CIRC_MINOR_TICK <- 2.25;
CIRC_TRACK_MJTICKL <- 1.5*TLEN_MULT; #0.5;
CIRC_TRACK_LWD <- 0.02*LWD_MULT; #0.075;
CIRC_TRACK_CEX <- 0.85*CEX_MULT; #100;
CIRC_TRACK_YLIM <- c(0,1.25);
CIRC_PAR_LWD <- 0.01*LWD_MULT;
CIRC_FIG_START_DEG <- -67;
CIRC_GAP_DEG <- c(3,3,3,9,3,3,3);
CIRC_FIG_XLIM <- c(-1.1,1.1)
CIRC_FIG_YLIM <- c(-1.1,1.1)
CIRC_LAB_TSIZE <- 2.2*0.45;
CIRC_LAB_OFFSET <- 6;
CIRC_TRACK_H <- 0.015*TRACK_MULT;
CIRC_PADDING <-  c(0,0,0,0);
# cluster_chars <- c('MCing','LPPO','LSM','LSupM','RPreM','RSM','RPPO')
# CIRC_TRACK_COLS = c("#E69F00","#56B4E9","#009E73","#F0E442","#0072B2","#D55E00","#CC79A7","#999999")
CIRC_TRACK_COLS = c("#FEC16E","#EFF4AE","#C2E7A1","#F7EFAE","#E6F598","#66C2A5","#3B9DB7","#999999")
CIRC_TRACK_COLS = darken(CIRC_TRACK_COLS,0.93)
CIRC_TRACK_GAPS = c(0.01,0.165)
#--
OUTER_CELL_LWD = 1*CEX_MULT;
#--
HIST_TRACK_YAXIND = 5;
HIST_TRACK_H <- 0.15*TRACK_MULT;
HIST_TRACK_YLIM <- c(0,1.2);
HIST_BG_COL <- NA;
HIST_TRACK_YTICKL <- 0.05*TLEN_MULT;
HIST_TRACK_MAJTL <- 0.5*TLEN_MULT;
HIST_TRACK_MINT <- 5;
HIST_CELL_LWD = 0.8*LWD_MULT
#--
DENSITY_LWD <- 2*LWD_MULT;
#--
LEG_CEX <- 1.5*CEX_MULT
LEG_DEF_LWD <- 13*LWD_MULT
LEG_POS = c(0.2,-0.8);
#--
ARR_TRACK_MJTICKL = 2*TLEN_MULT;
ARR_TRACK_YLIM = c(0,0.1);
ARR_TRACK_H = 0.0025*TRACK_MULT;
ARR_LEN = 0.3*ARR_MULT;
ARR_WID = 0.3*ARR_MULT;
ARR_DIR = -1;
ARR_HRATIO = 0.5;
ARR_TYPE = "big.arrow"
ARR_CELL_LWD = 1*CEX_MULT;
ARR_LWD = 0.4*CEX_MULT;
ARR_LTY = 1;
# cn_i = 1;
# mii = 1;
# eii = 2;
source("M:/jsalminen/GitHub/MIND_IN_MOTION_PRJ/MindInMotion_YoungerOlderAdults_Connectivity/src/r_scripts/cnctanl_lmes/lme_conn_slide_chordplot_fin_anl.R", echo=TRUE)
source("M:/jsalminen/GitHub/MIND_IN_MOTION_PRJ/MindInMotion_YoungerOlderAdults_Connectivity/src/r_scripts/cnctanl_lmes/lme_conn_slide_chordplot_fin_anl.R", echo=TRUE)
source("M:/jsalminen/GitHub/MIND_IN_MOTION_PRJ/MindInMotion_YoungerOlderAdults_Connectivity/src/r_scripts/cnctanl_lmes/lme_conn_slide_chordplot_fin_anl.R", echo=TRUE)
